"Asm.fif" include
// automatically generated from `/root/.config/toncli/func-libs/error_codes.func` `/root/.config/toncli/func-libs/math.func` `/root/.config/toncli/func-libs/stdlib.func` `/root/.config/toncli/test-libs/address_helpers.func` `/root/.config/toncli/test-libs/c5_parse_helpers.func` `/root/.config/toncli/test-libs/message_helpers.func` `/root/.config/toncli/test-libs/tests-helpers.func` `/root/.config/toncli/test-libs/storage-test-helpers.func` `/home/miki/Desktop/ton/func-contest-1-tests-playground/task-5/func/code.fc` `/home/miki/Desktop/ton/func-contest-1-tests-playground/task-5/tests/test.fc` 
PROGRAM{
  DECLPROC power
  DECLPROC sqrt
  DECLPROC avg
  DECLPROC exp
  DECLPROC log2
  114362 DECLMETHOD generate_empty_address
  103563 DECLMETHOD generate_internal_address
  71142 DECLMETHOD generate_internal_address_with_custom_data
  105789 DECLMETHOD generate_external_address
  77760 DECLMETHOD generate_external_address_with_custom_data
  119020 DECLMETHOD generate_var_address
  101577 DECLMETHOD generate_var_address_with_custom_data
  DECLPROC generate_any_address
  DECLPROC parse_send_raw_message
  DECLPROC parse_lib_code
  DECLPROC parse_raw_reserve
  DECLPROC parse_set_code
  DECLPROC parse_c5
  129018 DECLMETHOD generate_internal_message
  108731 DECLMETHOD generate_internal_message_relaxed
  115574 DECLMETHOD generate_external_in_message
  94514 DECLMETHOD generate_external_out_message
  77897 DECLMETHOD generate_external_out_message_relaxed
  94767 DECLMETHOD parse_internal_message
  97177 DECLMETHOD parse_external_message
  85860 DECLMETHOD get_c7
  78457 DECLMETHOD invoke_method
  93676 DECLMETHOD invoke_method_expect_fail
  127733 DECLMETHOD assert_no_actions
  69682 DECLMETHOD init_environment
  104832 DECLMETHOD storage_key
  68533 DECLMETHOD load_storage_with_tag
  113134 DECLMETHOD save_storage_with_tag
  90427 DECLMETHOD pack_data
  DECLPROC load_data
  DECLPROC find_request_old
  DECLPROC find_request_inline
  DECLPROC find_request
  DECLPROC replace_request_old
  DECLPROC replace_request_2
  DECLPROC replace_request_1
  DECLPROC replace_request
  DECLPROC recv_external
  DECLPROC recv_internal
  DECLPROC gen_msg_to_send
  DECLPROC gen_query
  DECLPROC assert_some_actions
  DECLPROC set_keys
  DECLPROC priv_key1
  DECLPROC priv_key2
  DECLPROC set_default_test_parameters
  DECLPROC __test_simple
  DECLPROC __test_wrong_signature
  power PROC:<{
    //  x exponent
    OVER	//  x exponent x
    0 EQINT	//  x exponent _3
    IFJMP:<{	//  x exponent
      2DROP	// 
      0 PUSHINT	//  _4=0
    }>	//  x exponent
    DUP	//  x exponent exponent
    0 EQINT	//  x exponent _6
    IFJMP:<{	//  x exponent
      2DROP	// 
      1 PUSHINT	//  _7=1
    }>	//  x exponent
    OVER	//  x counter result
    WHILE:<{
      OVER	//  x counter result counter
      1 GTINT	//  x counter result _11
    }>DO<{	//  x counter result
      s2 PUSH	//  x counter result x
      MUL	//  x counter result
      SWAP	//  x result counter
      DEC	//  x result counter
      SWAP	//  x counter result
    }>	//  x counter result
    2 1 BLKDROP2	//  result
  }>
  sqrt PROC:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IFJMP:<{	//  x
      DROP	// 
      0 PUSHINT	//  _3=0
    }>	//  x
    DUP	//  x x
    4 LESSINT	//  x _5
    IFJMP:<{	//  x
      DROP	// 
      1 PUSHINT	//  _6=1
    }>	//  x
    DUP	//  x x
    INC	//  x _9
    1 RSHIFT#	//  x z
    OVER	//  x z y
    WHILE:<{
      2DUP	//  x z y z y
      LESS	//  x z y _13
    }>DO<{	//  x z y
      DROP	//  x z
      s0 s1 s0 PUSH3	//  x z y x z
      DIV	//  x z y _14
      ROT	//  x y _14 z
      ADD	//  x y _15
      1 RSHIFT#	//  x y z
      SWAP	//  x z y
    }>	//  x z y
    2 1 BLKDROP2	//  y
  }>
  avg PROC:<{
    //  x y
    ADD	//  _2
    1 RSHIFT#	//  _4
  }>
  exp PROC:<{
    //  x
    DUP	//  x x
    -1 GTINT	//  x _2
    IF:<{	//  x
      POW2	//  _3
    }>ELSE<{	//  x
      1 PUSHINT	//  x _6=1
      SWAP	//  _6=1 x
      NEGATE	//  _6=1 _8
      RSHIFT	//  _3
    }>
  }>
  log2 PROC:<{
    //  x
    0 PUSHINT	//  x n=0
    7 PUSHPOW2	//  x n=0 _3=128
    exp INLINECALLDICT	//  x n=0 _4
    s2 s(-1) PUXC	//  x n=0 x _4
    GEQ	//  x n=0 _5
    IF:<{	//  x n=0
      DROP	//  x
      128 RSHIFT#	//  x
      7 PUSHPOW2	//  x n
    }>	//  x n
    64 PUSHINT	//  x n _10=64
    exp INLINECALLDICT	//  x n _11
    s2 s(-1) PUXC	//  x n x _11
    GEQ	//  x n _12
    IF:<{	//  x n
      SWAP	//  n x
      64 RSHIFT#	//  n x
      SWAP	//  x n
      64 ADDCONST	//  x n
    }>	//  x n
    32 PUSHINT	//  x n _17=32
    exp INLINECALLDICT	//  x n _18
    s2 s(-1) PUXC	//  x n x _18
    GEQ	//  x n _19
    IF:<{	//  x n
      SWAP	//  n x
      32 RSHIFT#	//  n x
      SWAP	//  x n
      32 ADDCONST	//  x n
    }>	//  x n
    16 PUSHINT	//  x n _24=16
    exp INLINECALLDICT	//  x n _25
    s2 s(-1) PUXC	//  x n x _25
    GEQ	//  x n _26
    IF:<{	//  x n
      SWAP	//  n x
      16 RSHIFT#	//  n x
      SWAP	//  x n
      16 ADDCONST	//  x n
    }>	//  x n
    8 PUSHINT	//  x n _31=8
    exp INLINECALLDICT	//  x n _32
    s2 s(-1) PUXC	//  x n x _32
    GEQ	//  x n _33
    IF:<{	//  x n
      SWAP	//  n x
      8 RSHIFT#	//  n x
      SWAP	//  x n
      8 ADDCONST	//  x n
    }>	//  x n
    4 PUSHINT	//  x n _38=4
    exp INLINECALLDICT	//  x n _39
    s2 s(-1) PUXC	//  x n x _39
    GEQ	//  x n _40
    IF:<{	//  x n
      SWAP	//  n x
      4 RSHIFT#	//  n x
      SWAP	//  x n
      4 ADDCONST	//  x n
    }>	//  x n
    2 PUSHINT	//  x n _45=2
    exp INLINECALLDICT	//  x n _46
    s2 s(-1) PUXC	//  x n x _46
    GEQ	//  x n _47
    IF:<{	//  x n
      SWAP	//  n x
      2 RSHIFT#	//  n x
      SWAP	//  x n
      2 ADDCONST	//  x n
    }>	//  x n
    1 PUSHINT	//  x n _52=1
    exp INLINECALLDICT	//  x n _53
    s1 s2 XCHG	//  n x _53
    GEQ	//  n _54
    IF:<{	//  n
      INC	//  n
    }>	//  n
  }>
  generate_empty_address PROC:<{
    // 
    0 PUSHINT	//  _0=0
    NEWC	//  _0=0 _1
    2 STU	//  _3
    ENDC	//  _4
    CTOS	//  _5
  }>
  generate_internal_address PROC:<{
    // 
    RANDU256	//  address
    -1 PUSHINT	//  address _3=-1
    0 PUSHINT	//  address _3=-1 _4=0
    2 PUSHINT	//  address _3=-1 _4=0 _5=2
    NEWC	//  address _3=-1 _4=0 _5=2 _6
    2 STU	//  address _3=-1 _4=0 _8
    1 STU	//  address _3=-1 _10
    8 STI	//  address _12
    256 STU	//  _14
    ENDC	//  _15
    CTOS	//  address_cell
  }>
  generate_internal_address_with_custom_data PROC:<{
    //  anycast workchain_id address
    2 PUSHINT	//  anycast workchain_id address _4=2
    NEWC	//  anycast workchain_id address _4=2 _5
    2 STU	//  anycast workchain_id address _7
    s1 s3 XCHG	//  address workchain_id anycast _7
    1 STU	//  address workchain_id _9
    8 STI	//  address _11
    256 STU	//  _13
    ENDC	//  _14
    CTOS	//  address_cell
  }>
  generate_external_address PROC:<{
    //  address_length
    RANDU256	//  address_length address
    1 PUSHINT	//  address_length address _4=1
    NEWC	//  address_length address _4=1 _5
    2 STU	//  address_length address _7
    s2 s(-1) PUXC	//  address_length address address_length _7
    8 STU	//  address_length address _9
    ROT	//  address _9 address_length
    STUX	//  _10
    ENDC	//  _11
    CTOS	//  address_cell
  }>
  generate_external_address_with_custom_data PROC:<{
    //  address_length address
    1 PUSHINT	//  address_length address _3=1
    NEWC	//  address_length address _3=1 _4
    2 STU	//  address_length address _6
    s2 s(-1) PUXC	//  address_length address address_length _6
    8 STU	//  address_length address _8
    ROT	//  address _8 address_length
    STUX	//  _9
    ENDC	//  _10
    CTOS	//  address_cell
  }>
  generate_var_address PROC:<{
    //  address_length
    DUP
    8 PUSHPOW2	//  address_length address_length _1=256
    GREATER	//  address_length _2
    IFJMP:<{	//  address_length
      RANDU256	//  address_length address
      RANDU256	//  address_length address address_secondpart
      -1 PUSHINT	//  address_length address address_secondpart _8=-1
      0 PUSHINT	//  address_length address address_secondpart _8=-1 _9=0
      3 PUSHINT	//  address_length address address_secondpart _8=-1 _9=0 _10=3
      NEWC	//  address_length address address_secondpart _8=-1 _9=0 _10=3 _11
      2 STU	//  address_length address address_secondpart _8=-1 _9=0 _13
      1 STU	//  address_length address address_secondpart _8=-1 _15
      s1 s4 XCHG	//  _8=-1 address address_secondpart address_length _15
      9 STU	//  _8=-1 address address_secondpart _17
      s1 s3 XCHG	//  address_secondpart address _8=-1 _17
      8 STI	//  address_secondpart address _19
      256 STU	//  address_secondpart _21
      256 STU	//  _23
      ENDC	//  _24
      CTOS	//  address_cell
    }>	//  address_length
    RANDU256	//  address_length address
    -1 PUSHINT	//  address_length address _29=-1
    0 PUSHINT	//  address_length address _29=-1 _30=0
    3 PUSHINT	//  address_length address _29=-1 _30=0 _31=3
    NEWC	//  address_length address _29=-1 _30=0 _31=3 _32
    2 STU	//  address_length address _29=-1 _30=0 _34
    1 STU	//  address_length address _29=-1 _36
    s3 s(-1) PUXC	//  address_length address _29=-1 address_length _36
    9 STU	//  address_length address _29=-1 _38
    8 STI	//  address_length address _40
    ROT	//  address _40 address_length
    STUX	//  _41
    ENDC	//  _42
    CTOS	//  address_cell
  }>
  generate_var_address_with_custom_data PROC:<{
    //  anycast workchain_id address_length address_slice
    OVER
    8 PUSHPOW2	//  anycast workchain_id address_length address_slice address_length _4=256
    GREATER	//  anycast workchain_id address_length address_slice _5
    IFJMP:<{	//  anycast workchain_id address_length address_slice
      256 LDU	//  anycast workchain_id address_length addr address_slice
      256 LDU	//  anycast workchain_id address_length addr _52 _51
      DROP	//  anycast workchain_id address_length addr addr_second_part
      3 PUSHINT	//  anycast workchain_id address_length addr addr_second_part _15=3
      NEWC	//  anycast workchain_id address_length addr addr_second_part _15=3 _16
      2 STU	//  anycast workchain_id address_length addr addr_second_part _18
      s1 s5 XCHG	//  addr_second_part workchain_id address_length addr anycast _18
      1 STU	//  addr_second_part workchain_id address_length addr _20
      s1 s2 XCHG	//  addr_second_part workchain_id addr address_length _20
      9 STU	//  addr_second_part workchain_id addr _22
      s1 s2 XCHG	//  addr_second_part addr workchain_id _22
      8 STI	//  addr_second_part addr _24
      256 STU	//  addr_second_part _26
      256 STU	//  _28
      ENDC	//  _29
      CTOS	//  address_cell
    }>	//  anycast workchain_id address_length address_slice
    256 LDU	//  anycast workchain_id address_length _54 _53
    DROP	//  anycast workchain_id address_length addr
    3 PUSHINT	//  anycast workchain_id address_length addr _36=3
    NEWC	//  anycast workchain_id address_length addr _36=3 _37
    2 STU	//  anycast workchain_id address_length addr _39
    s1 s4 XCHG	//  addr workchain_id address_length anycast _39
    1 STU	//  addr workchain_id address_length _41
    s1 s(-1) PUXC	//  addr workchain_id address_length address_length _41
    9 STU	//  addr workchain_id address_length _43
    s1 s2 XCHG	//  addr address_length workchain_id _43
    8 STI	//  addr address_length _45
    SWAP	//  addr _45 address_length
    STUX	//  _46
    ENDC	//  _47
    CTOS	//  address_cell
  }>
  generate_any_address PROC:<{
    // 
    4 PUSHINT	//  _1=4
    RAND	//  rnd
    DUP	//  rnd rnd
    0 EQINT	//  rnd _4
    IFJMP:<{	//  rnd
      DROP	// 
      generate_empty_address CALLDICT	//  _5
    }>	//  rnd
    DUP	//  rnd rnd
    1 EQINT	//  rnd _7
    IFJMP:<{	//  rnd
      DROP	// 
      generate_internal_address CALLDICT	//  _8
    }>	//  rnd
    2 EQINT	//  _10
    IFJMP:<{	// 
      8 PUSHPOW2	//  _11=256
      generate_external_address CALLDICT	//  _12
    }>	// 
    8 PUSHPOW2	//  _13=256
    generate_var_address CALLDICT	//  _14
  }>
  parse_send_raw_message PROC:<{
    //  out_action
    8 LDU	//  _1 out_action
    LDREF	//  _1 _9 _8
    DROP	//  _1 _4
  }>
  parse_lib_code PROC:<{
    //  out_action
    7 LDU	//  mode out_action
    DUP	//  mode out_action out_action
    SREFS	//  mode out_action _5
    0 GTINT	//  mode out_action _7
    IFJMP:<{	//  mode out_action
      LDREF	//  mode _20 _19
      DROP	//  mode _8
    }>	//  mode out_action
    256 LDSLICE	//  mode _22 _21
    DROP	//  mode loaded_bits
    NEWC	//  mode loaded_bits _14
    SWAP	//  mode _14 loaded_bits
    STSLICER	//  mode _15
    ENDC	//  mode _16
  }>
  parse_raw_reserve PROC:<{
    //  out_action
    8 LDU	//  _1 out_action
    LDDICT	//  _1 _9 _8
    DROP	//  _1 _4
  }>
  parse_set_code PROC:<{
    //  out_action
    LDREF	//  _4 _3
    DROP	//  _1
  }>
  parse_c5 PROC:<{
    // 
    NIL	//  list_of_actions_tuple
    c5 PUSH	//  list_of_actions_tuple c5
    CTOS	//  list_of_actions_tuple out_action
    DUP	//  list_of_actions_tuple out_action out_action
    SREFS	//  list_of_actions_tuple out_action counter
    DUP	//  list_of_actions_tuple out_action counter counter
    0 GTINT	//  list_of_actions_tuple out_action counter _9
    IF:<{	//  list_of_actions_tuple out_action counter
      UNTIL:<{
        SWAP	//  list_of_actions_tuple counter out_action
        LDREF	//  list_of_actions_tuple counter _60 _59
        NIP	//  list_of_actions_tuple counter out_action
        DUP	//  list_of_actions_tuple counter out_action out_action
        SBITS	//  list_of_actions_tuple counter out_action _12
        31 GTINT	//  list_of_actions_tuple counter out_action _14
        IF:<{	//  list_of_actions_tuple counter out_action
          32 LDU	//  list_of_actions_tuple counter action_code out_action
          OVER
          247711853 PUSHINT	//  list_of_actions_tuple counter action_code out_action action_code _19=247711853
          EQUAL	//  list_of_actions_tuple counter action_code out_action _20
          IF:<{	//  list_of_actions_tuple counter action_code out_action
            NIP	//  list_of_actions_tuple counter out_action
            DUP	//  list_of_actions_tuple counter out_action out_action
            parse_send_raw_message INLINECALLDICT	//  list_of_actions_tuple counter out_action mode body
            0 PUSHINT	//  list_of_actions_tuple counter out_action mode body _26=0
            s0 s2 XCHG	//  list_of_actions_tuple counter out_action _26=0 body mode
            TRIPLE	//  list_of_actions_tuple counter out_action _25
            s1 s3 XCHG	//  out_action counter list_of_actions_tuple _25
            TPUSH	//  out_action counter list_of_actions_tuple
          }>ELSE<{	//  list_of_actions_tuple counter action_code out_action
            OVER
            2907562126 PUSHINT	//  list_of_actions_tuple counter action_code out_action action_code _28=2907562126
            EQUAL	//  list_of_actions_tuple counter action_code out_action _29
            IF:<{	//  list_of_actions_tuple counter action_code out_action
              NIP	//  list_of_actions_tuple counter out_action
              DUP	//  list_of_actions_tuple counter out_action out_action
              parse_set_code INLINECALLDICT	//  list_of_actions_tuple counter out_action new_setcode
              1 PUSHINT	//  list_of_actions_tuple counter out_action new_setcode _34=1
              SWAP
              -1 PUSHINT	//  list_of_actions_tuple counter out_action _34=1 new_setcode _35=-1
              TRIPLE	//  list_of_actions_tuple counter out_action _33
              s1 s3 XCHG	//  out_action counter list_of_actions_tuple _33
              TPUSH	//  out_action counter list_of_actions_tuple
            }>ELSE<{	//  list_of_actions_tuple counter action_code out_action
              OVER
              921090057 PUSHINT	//  list_of_actions_tuple counter action_code out_action action_code _37=921090057
              EQUAL	//  list_of_actions_tuple counter action_code out_action _38
              IF:<{	//  list_of_actions_tuple counter action_code out_action
                NIP	//  list_of_actions_tuple counter out_action
                DUP	//  list_of_actions_tuple counter out_action out_action
                parse_raw_reserve INLINECALLDICT	//  list_of_actions_tuple counter out_action mode currencies
                2 PUSHINT	//  list_of_actions_tuple counter out_action mode currencies _44=2
                s0 s2 XCHG	//  list_of_actions_tuple counter out_action _44=2 currencies mode
                TRIPLE	//  list_of_actions_tuple counter out_action _43
                s1 s3 XCHG	//  out_action counter list_of_actions_tuple _43
                TPUSH	//  out_action counter list_of_actions_tuple
              }>ELSE<{	//  list_of_actions_tuple counter action_code out_action
                SWAP
                653925844 PUSHINT	//  list_of_actions_tuple counter out_action action_code _46=653925844
                EQUAL	//  list_of_actions_tuple counter out_action _47
                IF:<{	//  list_of_actions_tuple counter out_action
                  DUP	//  list_of_actions_tuple counter out_action out_action
                  parse_lib_code INLINECALLDICT	//  list_of_actions_tuple counter out_action mode lib_cell_or_lib_hash
                  3 PUSHINT	//  list_of_actions_tuple counter out_action mode lib_cell_or_lib_hash _53=3
                  s0 s2 XCHG	//  list_of_actions_tuple counter out_action _53=3 lib_cell_or_lib_hash mode
                  TRIPLE	//  list_of_actions_tuple counter out_action _52
                  s1 s3 XCHG	//  out_action counter list_of_actions_tuple _52
                  TPUSH	//  out_action counter list_of_actions_tuple
                  s0 s2 XCHG	//  list_of_actions_tuple counter out_action
                }>	//  list_of_actions_tuple counter out_action
                s0 s2 XCHG	//  out_action counter list_of_actions_tuple
              }>
            }>
          }>
          s0 s2 XCHG	//  list_of_actions_tuple counter out_action
        }>	//  list_of_actions_tuple counter out_action
        SWAP	//  list_of_actions_tuple out_action counter
        DEC	//  list_of_actions_tuple out_action counter
        DUP	//  list_of_actions_tuple out_action counter counter
        0 EQINT	//  list_of_actions_tuple out_action counter _58
      }>	//  list_of_actions_tuple out_action counter
      2DROP	//  list_of_actions_tuple
    }>ELSE<{
      2DROP	//  list_of_actions_tuple
    }>
  }>
  generate_internal_message PROC:<{
    //  bounce ton_amount payload
    generate_internal_address CALLDICT	//  bounce ton_amount payload ssrc
    generate_internal_address CALLDICT	//  bounce ton_amount payload ssrc sdest
    0 PUSHINT	//  bounce ton_amount payload ssrc sdest _8=0
    1000 PUSHINT	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000
    DUP	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000
    PUSHNULL	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11
    s3 s3 s3 PUSH3	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _12=0 _13=0 _14=0
    NEWC	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _12=0 _13=0 _14=0 _15
    1 STU	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _12=0 _13=0 _17
    1 STU	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _12=0 _19
    s1 s10 XCHG	//  _12=0 ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 bounce _19
    1 STU	//  _12=0 ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _21
    s1 s9 XCHG	//  _11 ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _12=0 _21
    1 STU	//  _11 ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _23
    s0 s5 XCHG2	//  _11 ton_amount payload _10=1000 sdest _8=0 _9=1000 _23 ssrc
    STSLICER	//  _11 ton_amount payload _10=1000 sdest _8=0 _9=1000 _24
    s0 s3 XCHG2	//  _11 ton_amount payload _10=1000 _9=1000 _8=0 _24 sdest
    STSLICER	//  _11 ton_amount payload _10=1000 _9=1000 _8=0 _25
    s0 s5 XCHG2	//  _11 _8=0 payload _10=1000 _9=1000 _25 ton_amount
    STGRAMS	//  _11 _8=0 payload _10=1000 _9=1000 _26
    s1 s5 XCHG	//  _9=1000 _8=0 payload _10=1000 _11 _26
    STDICT	//  _9=1000 _8=0 payload _10=1000 _27
    s3 PUSH	//  _9=1000 _8=0 payload _10=1000 _27 _28=0
    STGRAMS	//  _9=1000 _8=0 payload _10=1000 _29
    s3 PUSH	//  _9=1000 _8=0 payload _10=1000 _29 _30=0
    STGRAMS	//  _9=1000 _8=0 payload _10=1000 _31
    64 STU	//  _9=1000 _8=0 payload _33
    s1 s3 XCHG	//  payload _8=0 _9=1000 _33
    32 STU	//  payload _8=0 _35
    1 STU	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _38
    s2 PUSH	//  payload msg _38 payload
    BBITS	//  payload msg _38 _39
    ADD	//  payload msg _40
    10 PUSHPOW2DEC	//  payload msg _40 _41=1023
    GREATER	//  payload msg _42
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _43
      1 PUSHINT
      ROT	//  _43 _44=1 msg
      1 STU	//  _43 _46
      STREF	//  msg
    }>ELSE<{	//  payload msg
      1 PUSHINT	//  payload msg _48=1
      SWAP	//  payload _48=1 msg
      1 STU	//  payload _50
      SWAP	//  _50 payload
      STBR	//  msg
    }>
    ENDC	//  _52
  }>
  generate_internal_message_relaxed PROC:<{
    //  bounce ton_amount payload
    generate_any_address CALLDICT	//  bounce ton_amount payload ssrc
    generate_internal_address CALLDICT	//  bounce ton_amount payload ssrc sdest
    0 PUSHINT	//  bounce ton_amount payload ssrc sdest _8=0
    1000 PUSHINT	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000
    DUP	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000
    PUSHNULL	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11
    s3 s3 s3 PUSH3	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _12=0 _13=0 _14=0
    NEWC	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _12=0 _13=0 _14=0 _15
    1 STU	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _12=0 _13=0 _17
    1 STU	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _12=0 _19
    s1 s10 XCHG	//  _12=0 ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 bounce _19
    1 STU	//  _12=0 ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _21
    s1 s9 XCHG	//  _11 ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _12=0 _21
    1 STU	//  _11 ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _23
    s0 s5 XCHG2	//  _11 ton_amount payload _10=1000 sdest _8=0 _9=1000 _23 ssrc
    STSLICER	//  _11 ton_amount payload _10=1000 sdest _8=0 _9=1000 _24
    s0 s3 XCHG2	//  _11 ton_amount payload _10=1000 _9=1000 _8=0 _24 sdest
    STSLICER	//  _11 ton_amount payload _10=1000 _9=1000 _8=0 _25
    s0 s5 XCHG2	//  _11 _8=0 payload _10=1000 _9=1000 _25 ton_amount
    STGRAMS	//  _11 _8=0 payload _10=1000 _9=1000 _26
    s1 s5 XCHG	//  _9=1000 _8=0 payload _10=1000 _11 _26
    STDICT	//  _9=1000 _8=0 payload _10=1000 _27
    s3 PUSH	//  _9=1000 _8=0 payload _10=1000 _27 _28=0
    STGRAMS	//  _9=1000 _8=0 payload _10=1000 _29
    s3 PUSH	//  _9=1000 _8=0 payload _10=1000 _29 _30=0
    STGRAMS	//  _9=1000 _8=0 payload _10=1000 _31
    64 STU	//  _9=1000 _8=0 payload _33
    s1 s3 XCHG	//  payload _8=0 _9=1000 _33
    32 STU	//  payload _8=0 _35
    1 STU	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _38
    s2 PUSH	//  payload msg _38 payload
    BBITS	//  payload msg _38 _39
    ADD	//  payload msg _40
    10 PUSHPOW2DEC	//  payload msg _40 _41=1023
    GREATER	//  payload msg _42
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _43
      1 PUSHINT
      ROT	//  _43 _44=1 msg
      1 STU	//  _43 _46
      STREF	//  msg
    }>ELSE<{	//  payload msg
      1 PUSHINT	//  payload msg _48=1
      SWAP	//  payload _48=1 msg
      1 STU	//  payload _50
      SWAP	//  _50 payload
      STBR	//  msg
    }>
    ENDC	//  _52
  }>
  generate_external_in_message PROC:<{
    //  ton_amount payload
    8 PUSHPOW2	//  ton_amount payload _3=256
    generate_external_address CALLDICT	//  ton_amount payload ssrc
    generate_internal_address CALLDICT	//  ton_amount payload ssrc sdest
    0 PUSHINT	//  ton_amount payload ssrc sdest _8=0
    1000 PUSHINT	//  ton_amount payload ssrc sdest _8=0 _9=1000
    DUP	//  ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000
    2 PUSHINT	//  ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11=2
    NEWC	//  ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11=2 _12
    2 STU	//  ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _14
    s0 s5 XCHG2	//  ton_amount payload _10=1000 sdest _8=0 _9=1000 _14 ssrc
    STSLICER	//  ton_amount payload _10=1000 sdest _8=0 _9=1000 _15
    s0 s3 XCHG2	//  ton_amount payload _10=1000 _9=1000 _8=0 _15 sdest
    STSLICER	//  ton_amount payload _10=1000 _9=1000 _8=0 _16
    s0 s5 XCHG2	//  _8=0 payload _10=1000 _9=1000 _16 ton_amount
    STGRAMS	//  _8=0 payload _10=1000 _9=1000 _17
    s1 s2 XCHG	//  _8=0 payload _9=1000 _10=1000 _17
    64 STU	//  _8=0 payload _9=1000 _19
    32 STU	//  _8=0 payload _21
    s1 s2 XCHG	//  payload _8=0 _21
    1 STU	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _24
    s2 PUSH	//  payload msg _24 payload
    BBITS	//  payload msg _24 _25
    ADD	//  payload msg _26
    10 PUSHPOW2DEC	//  payload msg _26 _27=1023
    GREATER	//  payload msg _28
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _29
      1 PUSHINT
      ROT	//  _29 _30=1 msg
      1 STU	//  _29 _32
      STREF	//  msg
    }>ELSE<{	//  payload msg
      1 PUSHINT	//  payload msg _34=1
      SWAP	//  payload _34=1 msg
      1 STU	//  payload _36
      SWAP	//  _36 payload
      STBR	//  msg
    }>
    ENDC	//  _38
  }>
  generate_external_out_message PROC:<{
    //  ton_amount payload
    generate_internal_address CALLDICT	//  ton_amount payload ssrc
    8 PUSHPOW2	//  ton_amount payload ssrc _5=256
    generate_external_address CALLDICT	//  ton_amount payload ssrc sdest
    0 PUSHINT	//  ton_amount payload ssrc sdest _8=0
    1000 PUSHINT	//  ton_amount payload ssrc sdest _8=0 _9=1000
    DUP	//  ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000
    3 PUSHINT	//  ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11=3
    NEWC	//  ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11=3 _12
    2 STU	//  ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _14
    s0 s5 XCHG2	//  ton_amount payload _10=1000 sdest _8=0 _9=1000 _14 ssrc
    STSLICER	//  ton_amount payload _10=1000 sdest _8=0 _9=1000 _15
    s0 s3 XCHG2	//  ton_amount payload _10=1000 _9=1000 _8=0 _15 sdest
    STSLICER	//  ton_amount payload _10=1000 _9=1000 _8=0 _16
    s0 s5 XCHG2	//  _8=0 payload _10=1000 _9=1000 _16 ton_amount
    STGRAMS	//  _8=0 payload _10=1000 _9=1000 _17
    s1 s2 XCHG	//  _8=0 payload _9=1000 _10=1000 _17
    64 STU	//  _8=0 payload _9=1000 _19
    32 STU	//  _8=0 payload _21
    s1 s2 XCHG	//  payload _8=0 _21
    1 STU	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _24
    s2 PUSH	//  payload msg _24 payload
    BBITS	//  payload msg _24 _25
    ADD	//  payload msg _26
    10 PUSHPOW2DEC	//  payload msg _26 _27=1023
    GREATER	//  payload msg _28
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _29
      1 PUSHINT
      ROT	//  _29 _30=1 msg
      1 STU	//  _29 _32
      STREF	//  msg
    }>ELSE<{	//  payload msg
      1 PUSHINT	//  payload msg _34=1
      SWAP	//  payload _34=1 msg
      1 STU	//  payload _36
      SWAP	//  _36 payload
      STBR	//  msg
    }>
    ENDC	//  _38
  }>
  generate_external_out_message_relaxed PROC:<{
    //  ton_amount payload
    generate_any_address CALLDICT	//  ton_amount payload ssrc
    8 PUSHPOW2	//  ton_amount payload ssrc _5=256
    generate_external_address CALLDICT	//  ton_amount payload ssrc sdest
    0 PUSHINT	//  ton_amount payload ssrc sdest _8=0
    1000 PUSHINT	//  ton_amount payload ssrc sdest _8=0 _9=1000
    DUP	//  ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000
    3 PUSHINT	//  ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11=3
    NEWC	//  ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11=3 _12
    2 STU	//  ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _14
    s0 s5 XCHG2	//  ton_amount payload _10=1000 sdest _8=0 _9=1000 _14 ssrc
    STSLICER	//  ton_amount payload _10=1000 sdest _8=0 _9=1000 _15
    s0 s3 XCHG2	//  ton_amount payload _10=1000 _9=1000 _8=0 _15 sdest
    STSLICER	//  ton_amount payload _10=1000 _9=1000 _8=0 _16
    s0 s5 XCHG2	//  _8=0 payload _10=1000 _9=1000 _16 ton_amount
    STGRAMS	//  _8=0 payload _10=1000 _9=1000 _17
    s1 s2 XCHG	//  _8=0 payload _9=1000 _10=1000 _17
    64 STU	//  _8=0 payload _9=1000 _19
    32 STU	//  _8=0 payload _21
    s1 s2 XCHG	//  payload _8=0 _21
    1 STU	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _24
    s2 PUSH	//  payload msg _24 payload
    BBITS	//  payload msg _24 _25
    ADD	//  payload msg _26
    10 PUSHPOW2DEC	//  payload msg _26 _27=1023
    GREATER	//  payload msg _28
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _29
      1 PUSHINT
      ROT	//  _29 _30=1 msg
      1 STU	//  _29 _32
      STREF	//  msg
    }>ELSE<{	//  payload msg
      1 PUSHINT	//  payload msg _34=1
      SWAP	//  payload _34=1 msg
      1 STU	//  payload _36
      SWAP	//  _36 payload
      STBR	//  msg
    }>
    ENDC	//  _38
  }>
  parse_internal_message PROC:<{
    //  message
    CTOS	//  cs
    112 PUSHINT	//  cs _3
    SWAP	//  _3 cs
    1 LDU	//  _3 _4 cs
    SWAP	//  _3 cs _4
    0 NEQINT	//  _3 cs _8
    s1 s2 XCHG	//  cs _3 _8
    THROWANYIF
    1 LDU	//  ihr_disabled cs
    1 LDU	//  ihr_disabled bounce cs
    1 LDU	//  ihr_disabled bounce bounced cs
    LDMSGADDR	//  ihr_disabled bounce bounced src cs
    LDMSGADDR	//  ihr_disabled bounce bounced src to_address cs
    LDVARUINT16	//  ihr_disabled bounce bounced src to_address money cs
    LDDICT	//  ihr_disabled bounce bounced src to_address money _78 _77
    NIP	//  ihr_disabled bounce bounced src to_address money cs
    LDGRAMS	//  ihr_disabled bounce bounced src to_address money _80 _79
    NIP	//  ihr_disabled bounce bounced src to_address money cs
    LDGRAMS	//  ihr_disabled bounce bounced src to_address money _82 _81
    NIP	//  ihr_disabled bounce bounced src to_address money cs
    96 LDU	//  ihr_disabled bounce bounced src to_address money timestamps cs
    1 LDU	//  ihr_disabled bounce bounced src to_address money timestamps maybe_init_state cs
    0xFACC PUSHINT	//  ihr_disabled bounce bounced src to_address money timestamps maybe_init_state cs _47
    ROT	//  ihr_disabled bounce bounced src to_address money timestamps cs _47 maybe_init_state
    THROWANYIF
    NIL	//  ihr_disabled bounce bounced src to_address money timestamps cs init_state
    SWAP	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs
    1 LDU	//  ihr_disabled bounce bounced src to_address money timestamps init_state body_flag cs
    SWAP	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs body_flag
    0 EQINT	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs _58
    IF:<{	//  ihr_disabled bounce bounced src to_address money timestamps init_state body
    }>ELSE<{	//  ihr_disabled bounce bounced src to_address money timestamps init_state cs
      LDREF	//  ihr_disabled bounce bounced src to_address money timestamps init_state _90 _89
      DROP	//  ihr_disabled bounce bounced src to_address money timestamps init_state _59
      CTOS	//  ihr_disabled bounce bounced src to_address money timestamps init_state body
    }>
    9 TUPLE	//  _62
  }>
  parse_external_message PROC:<{
    //  message
    CTOS	//  cs
    2 LDU	//  msg_info cs
    113 PUSHINT	//  msg_info cs _7
    s2 PUSH	//  msg_info cs _7 msg_info
    2 NEQINT	//  msg_info cs _7 _9
    s0 s3 XCHG	//  _9 cs _7 msg_info
    3 NEQINT	//  _9 cs _7 _11
    s1 s3 XCHG	//  _7 cs _9 _11
    OR	//  _7 cs _12
    s1 s2 XCHG	//  cs _7 _12
    THROWANYIF
    LDMSGADDR	//  src cs
    LDMSGADDR	//  src to_address cs
    96 LDU	//  src to_address timestamps cs
    1 LDU	//  src to_address timestamps maybe_init_state cs
    0xFACC PUSHINT	//  src to_address timestamps maybe_init_state cs _28
    ROT	//  src to_address timestamps cs _28 maybe_init_state
    THROWANYIF
    NIL	//  src to_address timestamps cs init_state
    SWAP	//  src to_address timestamps init_state cs
    1 LDU	//  src to_address timestamps init_state body_flag cs
    SWAP	//  src to_address timestamps init_state cs body_flag
    0 EQINT	//  src to_address timestamps init_state cs _39
    IF:<{	//  src to_address timestamps init_state body
    }>ELSE<{	//  src to_address timestamps init_state cs
      LDREF	//  src to_address timestamps init_state _57 _56
      DROP	//  src to_address timestamps init_state _40
      CTOS	//  src to_address timestamps init_state body
    }>
    5 TUPLE	//  _43
  }>
  get_c7 PROC:<{
    // 
    124711402 PUSHINT	//  _2=124711402
    0 PUSHINT	//  _2=124711402 _3=0
    DUP	//  _2=124711402 _3=0 _4=0
    NOW	//  _2=124711402 _3=0 _4=0 _5
    1 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1
    DUP	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1
    239 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239
    1000000000 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _10=1000000000
    PUSHNULL	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _10=1000000000 _11
    PAIR	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12
    MYADDR	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12 _13
    CONFIGROOT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12 _13 _14
    10 TUPLE	//  _15
    SINGLE	//  _16
  }>
  invoke_method PROC:<{
    //  fun args
    {
    c7 PUSH DUP FIRST
    GASLIMITSTEMP SWAP DROP
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    GASLIMITSTEMP SWAP DROP
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    RESETLOADEDCELLS
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  exit_code gas_used return_values
    s2 PUSH	//  exit_code gas_used return_values exit_code
    0 NEQINT	//  exit_code gas_used return_values _7
    s3 PUSH	//  exit_code gas_used return_values _7 exit_code
    1 NEQINT	//  exit_code gas_used return_values _7 _9
    AND	//  exit_code gas_used return_values _10
    s1 s3 XCHG	//  return_values gas_used exit_code _10
    THROWANYIF
    SWAP	//  gas_used return_values
  }>
  invoke_method_expect_fail PROC:<{
    //  fun args
    {
    c7 PUSH DUP FIRST
    GASLIMITSTEMP SWAP DROP
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    GASLIMITSTEMP SWAP DROP
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    RESETLOADEDCELLS
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  _13 _14 _15
    DROP	//  exit_code gas_used
    OVER	//  exit_code gas_used exit_code
    0 EQINT	//  exit_code gas_used _8
    s0 s2 XCHG	//  _8 gas_used exit_code
    1 EQINT	//  _8 gas_used _10
    s1 s2 XCHG	//  gas_used _8 _10
    OR	//  gas_used _11
    201 THROWIF
  }>
  assert_no_actions PROC:<{
    // 
    c5 PUSH CTOS	//  _1
    SEMPTY	//  _2
    NOT	//  _3
    202 THROWIF
  }>
  init_environment PROC:<{
    // 
    PUSHNULL	//  _0
    NEWC	//  _0 _1
    STDICT	//  _2
    ENDC	//  _3
    c4 POP
  }>
  storage_key PROC:<{
    //  tag
    2824609491042946229920590003095732224 PUSHINTX	//  tag _3
    SWAP	//  _3 tag
    ADD	//  _4
  }>
  load_storage_with_tag PROC:<{
    //  tag
    storage_key CALLDICT	//  _1
    c4 PUSH	//  _1 _2
    CTOS	//  _1 _3
    PLDDICT	//  _1 _4
    8 PUSHPOW2	//  _1 _4 _5=256
    DICTIGETOPTREF	//  _6
  }>
  save_storage_with_tag PROC:<{
    //  tag storage
    c4 PUSH	//  tag storage _3
    CTOS	//  tag storage _4
    PLDDICT	//  tag storage dict
    s0 s2 XCHG	//  dict storage tag
    storage_key CALLDICT	//  dict storage _7
    ROT
    8 PUSHPOW2	//  storage _7 dict _8=256
    DICTISETREF	//  dict
    NEWC	//  dict _10
    STDICT	//  _11
    ENDC	//  _12
    c4 POP
  }>
  pack_data PROC:<{
    //  public_key1 public_key2
    0 PUSHINT	//  public_key1 public_key2 _2=0
    s0 s2 XCHG
    NEWC	//  _2=0 public_key2 public_key1 _3
    256 STU	//  _2=0 public_key2 _5
    256 STU	//  _2=0 _7
    25 STU	//  _11
    ENDC	//  _12
  }>
  load_data PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  ds
    256 LDU	//  public_key1 ds
    256 LDU	//  public_key1 public_key2 ds
    -ROT	//  ds public_key1 public_key2
  }>
  find_request_old PROC:<{
    //  s hash
    -1 PUSHINT	//  s hash pos=-1
    0 PUSHINT	//  s hash pos=-1 size=0
    1 PUSHINT	//  s hash pos=-1 size=0 lvl=1
    WHILE:<{
      s2 PUSH	//  s hash pos size lvl pos
      -1 EQINT	//  s hash pos size lvl _9
      s5 PUSH	//  s hash pos size lvl _9 s
      SREMPTY	//  s hash pos size lvl _9 _10
      NOT	//  s hash pos size lvl _9 _11
      AND	//  s hash pos size lvl _12
    }>DO<{	//  s hash pos size lvl
      SWAP	//  s hash pos lvl size
      INC	//  s hash pos lvl size
      s0 s4 XCHG	//  size hash pos lvl s
      LDREF	//  size hash pos lvl ref s
      s5 PUSH	//  size hash pos lvl ref s size
      4 EQINT	//  size hash pos lvl ref s _19
      s6 PUSH	//  size hash pos lvl ref s _19 size
      8 EQINT	//  size hash pos lvl ref s _19 _21
      OR	//  size hash pos lvl ref s _22
      IF:<{	//  size hash pos lvl ref s
        DROP	//  size hash pos lvl ref
        SWAP	//  size hash pos ref lvl
        INC	//  size hash pos ref lvl
        SWAP	//  size hash pos lvl ref
        CTOS	//  size hash pos lvl s
      }>ELSE<{	//  size hash pos lvl ref s
        SWAP	//  size hash pos lvl s ref
        HASHCU	//  size hash pos lvl s _26
        s4 PUSH	//  size hash pos lvl s _26 hash
        EQUAL	//  size hash pos lvl s _27
        IF:<{	//  size hash pos lvl s
          s2 POP	//  size hash s lvl
          s3 s0 PUSH2	//  size hash s lvl size lvl
          SUB	//  size hash s lvl pos
          s0 s2 XCHG	//  size hash pos lvl s
        }>	//  size hash pos lvl s
      }>
      s4 s4 XCHG2	//  s hash pos size lvl
    }>	//  s hash pos size lvl
    s2 s4 XCHG
    4 BLKDROP	//  pos
  }>
  find_request_inline PROCREF:<{
    //  s hash
    OVER	//  s hash s
    SREFS	//  s hash _2
    4 EQINT	//  s hash _4
    IFJMP:<{	//  s hash
      SWAP	//  hash s
      LDREF	//  hash _5 s
      SWAP	//  hash s _5
      HASHCU	//  hash s _7
      s2 PUSH	//  hash s _7 hash
      EQUAL	//  hash s _8
      IFJMP:<{	//  hash s
        2DROP	// 
        0 PUSHINT	//  _9=0
      }>	//  hash s
      LDREF	//  hash _10 s
      SWAP	//  hash s _10
      HASHCU	//  hash s _12
      s2 PUSH	//  hash s _12 hash
      EQUAL	//  hash s _13
      IFJMP:<{	//  hash s
        2DROP	// 
        1 PUSHINT	//  _14=1
      }>	//  hash s
      LDREF	//  hash _15 s
      SWAP	//  hash s _15
      HASHCU	//  hash s _17
      s2 PUSH	//  hash s _17 hash
      EQUAL	//  hash s _18
      IFJMP:<{	//  hash s
        2DROP	// 
        2 PUSHINT	//  _19=2
      }>	//  hash s
      LDREF	//  hash _76 _75
      DROP	//  hash _20
      HASHCU	//  hash _22
      SWAP	//  _22 hash
      EQUAL	//  _23
      IFJMP:<{	// 
        3 PUSHINT	//  _24=3
      }>	// 
      -100 PUSHINT	//  _25=-100
    }>	//  s hash
    OVER	//  s hash s
    SREFS	//  s hash _26
    3 EQINT	//  s hash _28
    IFJMP:<{	//  s hash
      SWAP	//  hash s
      LDREF	//  hash _29 s
      SWAP	//  hash s _29
      HASHCU	//  hash s _31
      s2 PUSH	//  hash s _31 hash
      EQUAL	//  hash s _32
      IFJMP:<{	//  hash s
        2DROP	// 
        0 PUSHINT	//  _33=0
      }>	//  hash s
      LDREF	//  hash _34 s
      SWAP	//  hash s _34
      HASHCU	//  hash s _36
      s2 PUSH	//  hash s _36 hash
      EQUAL	//  hash s _37
      IFJMP:<{	//  hash s
        2DROP	// 
        1 PUSHINT	//  _38=1
      }>	//  hash s
      LDREF	//  hash _82 _81
      DROP	//  hash _39
      HASHCU	//  hash _41
      SWAP	//  _41 hash
      EQUAL	//  _42
      IFJMP:<{	// 
        2 PUSHINT	//  _43=2
      }>	// 
      -100 PUSHINT	//  _44=-100
    }>	//  s hash
    OVER	//  s hash s
    SREFS	//  s hash _45
    2 EQINT	//  s hash _47
    IFJMP:<{	//  s hash
      SWAP	//  hash s
      LDREF	//  hash _48 s
      SWAP	//  hash s _48
      HASHCU	//  hash s _50
      s2 PUSH	//  hash s _50 hash
      EQUAL	//  hash s _51
      IFJMP:<{	//  hash s
        2DROP	// 
        0 PUSHINT	//  _52=0
      }>	//  hash s
      LDREF	//  hash _86 _85
      DROP	//  hash _53
      HASHCU	//  hash _55
      SWAP	//  _55 hash
      EQUAL	//  _56
      IFJMP:<{	// 
        1 PUSHINT	//  _57=1
      }>	// 
      -100 PUSHINT	//  _58=-100
    }>	//  s hash
    OVER	//  s hash s
    SREFS	//  s hash _59
    1 EQINT	//  s hash _61
    IFJMP:<{	//  s hash
      SWAP	//  hash s
      LDREF	//  hash _88 _87
      DROP	//  hash _62
      HASHCU	//  hash _64
      SWAP	//  _64 hash
      EQUAL	//  _65
      IFJMP:<{	// 
        0 PUSHINT	//  _66=0
      }>	// 
      -100 PUSHINT	//  _67=-100
    }>	//  s hash
    2DROP	// 
    -100 PUSHINT	//  _68=-100
  }>
  find_request PROCREF:<{
    //  s hash
    OVER	//  s hash s
    SREFS	//  s hash _2
    4 EQINT	//  s hash _4
    IFJMP:<{	//  s hash
      SWAP	//  hash s
      LDREF	//  hash _5 s
      SWAP	//  hash s _5
      HASHCU	//  hash s _7
      s2 PUSH	//  hash s _7 hash
      EQUAL	//  hash s _8
      IFJMP:<{	//  hash s
        2DROP	// 
        0 PUSHINT	//  _9=0
      }>	//  hash s
      LDREF	//  hash _10 s
      SWAP	//  hash s _10
      HASHCU	//  hash s _12
      s2 PUSH	//  hash s _12 hash
      EQUAL	//  hash s _13
      IFJMP:<{	//  hash s
        2DROP	// 
        1 PUSHINT	//  _14=1
      }>	//  hash s
      LDREF	//  hash _15 s
      SWAP	//  hash s _15
      HASHCU	//  hash s _17
      s2 PUSH	//  hash s _17 hash
      EQUAL	//  hash s _18
      IFJMP:<{	//  hash s
        2DROP	// 
        2 PUSHINT	//  _19=2
      }>	//  hash s
      LDREF	//  hash _58 _57
      DROP	//  hash _20
      CTOS	//  hash s
      DUP	//  hash s s
      SREFS	//  hash s _23
      4 EQINT	//  hash s _25
      IFJMP:<{	//  hash s
        LDREF	//  hash _26 s
        SWAP	//  hash s _26
        HASHCU	//  hash s _28
        s2 PUSH	//  hash s _28 hash
        EQUAL	//  hash s _29
        IFJMP:<{	//  hash s
          2DROP	// 
          3 PUSHINT	//  _30=3
        }>	//  hash s
        LDREF	//  hash _31 s
        SWAP	//  hash s _31
        HASHCU	//  hash s _33
        s2 PUSH	//  hash s _33 hash
        EQUAL	//  hash s _34
        IFJMP:<{	//  hash s
          2DROP	// 
          4 PUSHINT	//  _35=4
        }>	//  hash s
        LDREF	//  hash _36 s
        SWAP	//  hash s _36
        HASHCU	//  hash s _38
        s2 PUSH	//  hash s _38 hash
        EQUAL	//  hash s _39
        IFJMP:<{	//  hash s
          2DROP	// 
          5 PUSHINT	//  _40=5
        }>	//  hash s
        LDREF	//  hash _66 _65
        DROP	//  hash _41
        CTOS	//  hash s
        SWAP	//  s hash
        find_request_inline INLINECALLDICT	//  _45
        6 ADDCONST	//  _46
      }>	//  hash s
      SWAP	//  s hash
      find_request_inline INLINECALLDICT	//  _48
      3 ADDCONST	//  _49
    }>	//  s hash
    find_request_inline INLINECALLDICT	//  _50
  }>
  replace_request_old PROC:<{
    //  b old_slice pos lvl request
    3 PUSHINT	//  b old_slice pos lvl request cnt_inplace=3
    s2 PUSH	//  b old_slice pos lvl request cnt_inplace=3 lvl
    2 EQINT	//  b old_slice pos lvl request cnt_inplace=3 _8
    IF:<{	//  b old_slice pos lvl request cnt_inplace=3
      DROP	//  b old_slice pos lvl request
      4 PUSHINT	//  b old_slice pos lvl request cnt_inplace
    }>	//  b old_slice pos lvl request cnt_inplace
    s3 s(-1) PUXC	//  b old_slice pos lvl request pos cnt_inplace
    LESS	//  b old_slice pos lvl request _11
    IF:<{	//  b old_slice pos lvl request
      NIP	//  b old_slice pos request
      SWAP	//  b old_slice request pos
      REPEAT:<{	//  b old_slice request
        SWAP	//  b request old_slice
        LDREF	//  b request _12 old_slice
        s0 s3 XCHG	//  old_slice request _12 b
        STREF	//  old_slice request b
        -ROT	//  b old_slice request
      }>
      ROT	//  old_slice request b
      STREF	//  old_slice b
      OVER	//  old_slice b old_slice
      ISNULL	//  old_slice b _16
      NOT	//  old_slice b _17
      IF:<{	//  old_slice b
        OVER	//  old_slice b old_slice
        SREMPTY	//  old_slice b _18
        NOT	//  old_slice b _19
        IF:<{	//  old_slice b
          SWAP	//  b old_slice
          LDREF	//  b _49 _48
          NIP	//  b old_slice
          SWAP	//  old_slice b
        }>	//  old_slice b
        OVER	//  old_slice b old_slice
        SREFS	//  old_slice b _22
        REPEAT:<{	//  old_slice b
          SWAP	//  b old_slice
          LDREF	//  b _23 old_slice
          s0 s2 XCHG	//  old_slice _23 b
          STREF	//  old_slice b
        }>
        NIP	//  b
      }>ELSE<{
        NIP	//  b
      }>
    }>ELSE<{	//  b old_slice pos lvl request
      3 PUSHINT	//  b old_slice pos lvl request _26=3
      REPEAT:<{	//  b old_slice pos lvl request
        s0 s3 XCHG	//  b request pos lvl old_slice
        LDREF	//  b request pos lvl _27 old_slice
        s0 s5 XCHG	//  old_slice request pos lvl _27 b
        STREF	//  old_slice request pos lvl b
        s0 s4 XCHG
        s0 s3 XCHG	//  b old_slice pos lvl request
      }>
      PUSHNULL	//  b old_slice pos lvl request children_old_slice
      s4 PUSH	//  b old_slice pos lvl request children_old_slice old_slice
      SREMPTY	//  b old_slice pos lvl request children_old_slice _32
      NOT	//  b old_slice pos lvl request children_old_slice _33
      IF:<{	//  b old_slice pos lvl request children_old_slice
        DROP	//  b old_slice pos lvl request
        s0 s3 XCHG	//  b request pos lvl old_slice
        LDREF	//  b request pos lvl _55 _54
        DROP	//  b request pos lvl _34
        CTOS	//  b request pos lvl children_old_slice
        s0 s3 XCHG	//  b children_old_slice pos lvl request
      }>ELSE<{
        s4 POP	//  b children_old_slice pos lvl request
      }>
      NEWC	//  b children_old_slice pos lvl request _38
      s0 s3 XCHG	//  b children_old_slice _38 lvl request pos
      -3 ADDCONST	//  b children_old_slice _38 lvl request _40
      s0 s2 XCHG	//  b children_old_slice _38 _40 request lvl
      INC	//  b children_old_slice _38 _40 request _42
      s3 s4 XCHG
      SWAP	//  b _38 children_old_slice _40 _42 request
      replace_request_old CALLDICT	//  b children
      SWAP	//  children b
      STREF	//  b
    }>
    ENDC	//  _45
  }>
  replace_request_2 PROC:<{
    //  old_slice pos request
    NEWC	//  old_slice pos request b
    s0 s2 XCHG	//  old_slice b request pos
    REPEAT:<{	//  old_slice b request
      s0 s2 XCHG	//  request b old_slice
      LDREF	//  request b _5 old_slice
      s0 s2 XCHG	//  request old_slice _5 b
      STREF	//  request old_slice b
      ROT	//  old_slice b request
    }>
    SWAP	//  old_slice request b
    STREF	//  old_slice b
    OVER	//  old_slice b old_slice
    SREMPTY	//  old_slice b _9
    NOT	//  old_slice b _10
    IF:<{	//  old_slice b
      SWAP	//  b old_slice
      LDREF	//  b _21 _20
      NIP	//  b old_slice
      DUP	//  b old_slice old_slice
      SREFS	//  b old_slice _13
      REPEAT:<{	//  b old_slice
        LDREF	//  b _14 old_slice
        s0 s2 XCHG	//  old_slice _14 b
        STREF	//  old_slice b
        SWAP	//  b old_slice
      }>
      DROP	//  b
    }>ELSE<{
      NIP	//  b
    }>
    ENDC	//  _17
  }>
  replace_request_1 PROC:<{
    //  old_slice pos request
    NEWC	//  old_slice pos request b
    s2 PUSH	//  old_slice pos request b pos
    3 LESSINT	//  old_slice pos request b _6
    IF:<{	//  old_slice pos request b
      s0 s2 XCHG	//  old_slice b request pos
      REPEAT:<{	//  old_slice b request
        s0 s2 XCHG	//  request b old_slice
        LDREF	//  request b _7 old_slice
        s0 s2 XCHG	//  request old_slice _7 b
        STREF	//  request old_slice b
        ROT	//  old_slice b request
      }>
      SWAP	//  old_slice request b
      STREF	//  old_slice b
      OVER	//  old_slice b old_slice
      SREMPTY	//  old_slice b _11
      NOT	//  old_slice b _12
      IF:<{	//  old_slice b
        SWAP	//  b old_slice
        LDREF	//  b _37 _36
        NIP	//  b old_slice
        DUP	//  b old_slice old_slice
        SREFS	//  b old_slice _15
        REPEAT:<{	//  b old_slice
          LDREF	//  b _16 old_slice
          s0 s2 XCHG	//  old_slice _16 b
          STREF	//  old_slice b
          SWAP	//  b old_slice
        }>
        DROP	//  b
      }>ELSE<{
        NIP	//  b
      }>
    }>ELSE<{	//  old_slice pos request b
      3 PUSHINT	//  old_slice pos request b _19=3
      REPEAT:<{	//  old_slice pos request b
        s0 s3 XCHG	//  b pos request old_slice
        LDREF	//  b pos request _20 old_slice
        s0 s4 XCHG	//  old_slice pos request _20 b
        STREF	//  old_slice pos request b
      }>
      s3 s3 PUSH2	//  old_slice pos request b children_old_slice old_slice
      SREMPTY	//  old_slice pos request b children_old_slice _24
      NOT	//  old_slice pos request b children_old_slice _25
      IF:<{	//  old_slice pos request b children_old_slice
        DROP	//  old_slice pos request b
        s0 s3 XCHG	//  b pos request old_slice
        LDREFRTOS	//  b pos request _42 _43
        NIP	//  b pos request children_old_slice
        s0 s3 XCHG	//  children_old_slice pos request b
      }>ELSE<{
        s4 POP	//  children_old_slice pos request b
      }>
      s0 s2 XCHG	//  children_old_slice b request pos
      -3 ADDCONST	//  children_old_slice b request _30
      s3 s0 s0 XCHG3	//  b children_old_slice _30 request
      replace_request_2 INLINECALLDICT	//  b children
      SWAP	//  children b
      STREF	//  b
    }>
    ENDC	//  _33
  }>
  replace_request PROC:<{
    //  b old_slice pos request
    OVER	//  b old_slice pos request pos
    3 LESSINT	//  b old_slice pos request _5
    IF:<{	//  b old_slice pos request
      SWAP	//  b old_slice request pos
      REPEAT:<{	//  b old_slice request
        SWAP	//  b request old_slice
        LDREF	//  b request _6 old_slice
        s0 s3 XCHG	//  old_slice request _6 b
        STREF	//  old_slice request b
        -ROT	//  b old_slice request
      }>
      ROT	//  old_slice request b
      STREF	//  old_slice b
      OVER	//  old_slice b old_slice
      SREMPTY	//  old_slice b _10
      NOT	//  old_slice b _11
      IF:<{	//  old_slice b
        SWAP	//  b old_slice
        LDREF	//  b _36 _35
        NIP	//  b old_slice
        DUP	//  b old_slice old_slice
        SREFS	//  b old_slice _14
        REPEAT:<{	//  b old_slice
          LDREF	//  b _15 old_slice
          s0 s2 XCHG	//  old_slice _15 b
          STREF	//  old_slice b
          SWAP	//  b old_slice
        }>
        DROP	//  b
      }>ELSE<{
        NIP	//  b
      }>
    }>ELSE<{	//  b old_slice pos request
      3 PUSHINT	//  b old_slice pos request _18=3
      REPEAT:<{	//  b old_slice pos request
        s0 s2 XCHG	//  b request pos old_slice
        LDREF	//  b request pos _19 old_slice
        s0 s4 XCHG	//  old_slice request pos _19 b
        STREF	//  old_slice request pos b
        s3 s1 s3 XCHG3	//  b old_slice pos request
      }>
      s2 s2 PUSH2	//  b old_slice pos request children_old_slice old_slice
      SREMPTY	//  b old_slice pos request children_old_slice _23
      NOT	//  b old_slice pos request children_old_slice _24
      IF:<{	//  b old_slice pos request children_old_slice
        DROP	//  b old_slice pos request
        s0 s2 XCHG	//  b request pos old_slice
        LDREFRTOS	//  b request pos _41 _42
        NIP	//  b request pos children_old_slice
        s0 s2 XCHG	//  b children_old_slice pos request
      }>ELSE<{
        s3 POP	//  b children_old_slice pos request
      }>
      SWAP	//  b children_old_slice request pos
      -3 ADDCONST	//  b children_old_slice request _29
      SWAP	//  b children_old_slice _29 request
      replace_request_1 INLINECALLDICT	//  b children
      SWAP	//  children b
      STREF	//  b
    }>
    ENDC	//  _32
  }>
  recv_external PROC:<{
    //  in_msg_body
    256 LDU	//  public_key in_msg_body
    9 PUSHPOW2	//  public_key in_msg_body _7=512
    LDSLICEX	//  public_key signature in_msg_body
    LDREF	//  public_key signature request_cell in_msg_body
    ENDS
    DUP	//  public_key signature request_cell request_cell
    CTOS	//  public_key signature request_cell request
    OVER	//  public_key signature request_cell request request_cell
    HASHCU	//  public_key signature request_cell request _16
    s0 s3 s4 XC2PU	//  public_key request request_cell _16 signature public_key
    CHKSIGNU	//  public_key request request_cell _17
    NOT	//  public_key request request_cell _18
    100 THROWIF
    SWAP	//  public_key request_cell request
    32 LDU	//  public_key request_cell valid_until request
    OVER
    NOW	//  public_key request_cell valid_until request valid_until _25
    LESS	//  public_key request_cell valid_until request _26
    101 THROWIF
    NOW	//  public_key request_cell valid_until request _29
    60 ADDCONST	//  public_key request_cell valid_until request _31
    s2 s(-1) PUXC	//  public_key request_cell valid_until request valid_until _31
    GREATER	//  public_key request_cell valid_until request _32
    102 THROWIF
    load_data INLINECALLDICT	//  public_key request_cell valid_until request tree public_key1 public_key2
    0 PUSHINT	//  public_key request_cell valid_until request tree public_key1 public_key2 key_mask=0
    s7 s2 PUSH2	//  public_key request_cell valid_until request tree public_key1 public_key2 key_mask=0 public_key public_key1
    EQUAL	//  public_key request_cell valid_until request tree public_key1 public_key2 key_mask=0 _40
    IF:<{	//  public_key request_cell valid_until request tree public_key1 public_key2 key_mask=0
      DROP
      s6 POP	//  public_key2 request_cell valid_until request tree public_key1
      1 PUSHINT	//  public_key2 request_cell valid_until request tree public_key1 key_mask=1
    }>ELSE<{	//  public_key request_cell valid_until request tree public_key1 public_key2 key_mask=0
      s7 s1 XCPU	//  key_mask=0 request_cell valid_until request tree public_key1 public_key2 public_key public_key2
      EQUAL	//  key_mask=0 request_cell valid_until request tree public_key1 public_key2 _42
      IF:<{	//  key_mask=0 request_cell valid_until request tree public_key1 public_key2
        s6 POP	//  public_key2 request_cell valid_until request tree public_key1
        2 PUSHINT	//  public_key2 request_cell valid_until request tree public_key1 key_mask=2
      }>ELSE<{	//  key_mask=0 request_cell valid_until request tree public_key1 public_key2
        103 THROW
        s0 s6 XCHG	//  public_key2 request_cell valid_until request tree public_key1 key_mask
      }>
    }>
    s0 s2 XCHG	//  public_key2 request_cell valid_until request key_mask public_key1 tree
    5 LDU	//  public_key2 request_cell valid_until request key_mask public_key1 cnt tree
    20 LDU	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask tree
    s2 PUSH	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask tree cnt
    5 LSHIFT#	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask tree _57
    LDSLICEX	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask valid_untils tree
    s8 PUSH	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask valid_untils tree request_cell
    HASHCU	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask valid_untils tree _60
    s1 s(-1) PUXC	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask valid_untils tree tree _60
    find_request INLINECALLDICT	//  public_key2 request_cell valid_until request key_mask public_key1 cnt full_mask valid_untils tree pos
    s0 s5 XCHG
    NEWC	//  public_key2 request_cell valid_until request key_mask pos cnt full_mask valid_untils tree public_key1 _63
    256 STU	//  public_key2 request_cell valid_until request key_mask pos cnt full_mask valid_untils tree _65
    s1 s10 XCHG	//  tree request_cell valid_until request key_mask pos cnt full_mask valid_untils public_key2 _65
    256 STU	//  tree request_cell valid_until request key_mask pos cnt full_mask valid_untils new_tree
    s4 PUSH	//  tree request_cell valid_until request key_mask pos cnt full_mask valid_untils new_tree pos
    0 LESSINT	//  tree request_cell valid_until request key_mask pos cnt full_mask valid_untils new_tree _69
    IF:<{	//  tree request_cell valid_until request key_mask pos cnt full_mask valid_untils new_tree
      s4 POP
      s5 POP	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask
      s4 PUSH	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask valid_untils_copy
      0 PUSHINT	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask valid_untils_copy npos=0
      WHILE:<{
        s0 s3 PUSH2	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask valid_untils_copy npos npos cnt
        LESS	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask valid_untils_copy npos _73
      }>DO<{	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask valid_untils_copy npos
        SWAP	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos valid_untils_copy
        32 LDU	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos _74 valid_untils_copy
        SWAP
        NOW	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos valid_untils_copy _74 _77
        LESS	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos valid_untils_copy _78
        IF:<{	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos valid_untils_copy
          s1 s3 XCPU	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask valid_untils_copy npos cnt
          ADD	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask valid_untils_copy npos
          SWAP	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos valid_untils_copy
        }>	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos valid_untils_copy
        SWAP	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask valid_untils_copy npos
        INC	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask valid_untils_copy npos
      }>	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask valid_untils_copy npos
      NIP	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos
      s0 s2 PUSH2	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos npos cnt
      GREATER	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos _82
      IF:<{	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos
        s2 PUSH	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos cnt
        INC	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos _84
        SUB	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos
      }>	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos
      DUP	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos npos
      10 EQINT	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos _88
      104 THROWIF
      NEWC	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos new_valid_untils
      OVER	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos new_valid_untils npos
      5 LSHIFT#	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos new_valid_untils _94
      s1 s7 XCHG	//  tree request_cell valid_until new_valid_untils key_mask new_tree cnt full_mask npos valid_untils _94
      LDSLICEX	//  tree request_cell valid_until new_valid_untils key_mask new_tree cnt full_mask npos _92 valid_untils
      s7 s7 XCHG2	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos new_valid_untils _92
      STSLICER	//  tree request_cell valid_until valid_untils key_mask new_tree cnt full_mask npos new_valid_untils
      s1 s7 XCHG	//  tree request_cell npos valid_untils key_mask new_tree cnt full_mask valid_until new_valid_untils
      32 STU	//  tree request_cell npos valid_untils key_mask new_tree cnt full_mask new_valid_untils
      s6 PUSH	//  tree request_cell npos valid_untils key_mask new_tree cnt full_mask new_valid_untils npos
      INC	//  tree request_cell npos valid_untils key_mask new_tree cnt full_mask new_valid_untils _101
      s3 PUSH	//  tree request_cell npos valid_untils key_mask new_tree cnt full_mask new_valid_untils _101 cnt
      LESS	//  tree request_cell npos valid_untils key_mask new_tree cnt full_mask new_valid_untils _102
      IF:<{	//  tree request_cell npos valid_untils key_mask new_tree cnt full_mask new_valid_untils
        s0 s5 XCHG	//  tree request_cell npos new_valid_untils key_mask new_tree cnt full_mask valid_untils
        32 LDU	//  tree request_cell npos new_valid_untils key_mask new_tree cnt full_mask _194 _193
        NIP	//  tree request_cell npos new_valid_untils key_mask new_tree cnt full_mask valid_untils
        s1 s5 XCHG	//  tree request_cell npos full_mask key_mask new_tree cnt new_valid_untils valid_untils
        STSLICER	//  tree request_cell npos full_mask key_mask new_tree cnt new_valid_untils
        s0 s4 XCHG	//  tree request_cell npos new_valid_untils key_mask new_tree cnt full_mask
      }>ELSE<{
        s5 POP	//  tree request_cell npos new_valid_untils key_mask new_tree cnt full_mask
      }>
      s5 PUSH	//  tree request_cell npos new_valid_untils key_mask new_tree cnt full_mask npos
      INC	//  tree request_cell npos new_valid_untils key_mask new_tree cnt full_mask _109
      s1 s2 XCHG	//  tree request_cell npos new_valid_untils key_mask new_tree full_mask cnt _109
      MAX	//  tree request_cell npos new_valid_untils key_mask new_tree full_mask ncnt
      ROT	//  tree request_cell npos new_valid_untils key_mask full_mask ncnt new_tree
      5 STU	//  tree request_cell npos new_valid_untils key_mask full_mask new_tree
      3 PUSHINT	//  tree request_cell npos new_valid_untils key_mask full_mask new_tree _115=3
      s5 PUSH	//  tree request_cell npos new_valid_untils key_mask full_mask new_tree _115=3 npos
      1 LSHIFT#	//  tree request_cell npos new_valid_untils key_mask full_mask new_tree _115=3 _117
      LSHIFT	//  tree request_cell npos new_valid_untils key_mask full_mask new_tree _118
      NOT	//  tree request_cell npos new_valid_untils key_mask full_mask new_tree _119
      s1 s2 XCHG	//  tree request_cell npos new_valid_untils key_mask new_tree full_mask _119
      AND	//  tree request_cell npos new_valid_untils key_mask new_tree next_full_mask
      s4 PUSH	//  tree request_cell npos new_valid_untils key_mask new_tree next_full_mask npos
      1 LSHIFT#	//  tree request_cell npos new_valid_untils key_mask new_tree next_full_mask _122
      s1 s3 XCHG	//  tree request_cell npos new_valid_untils next_full_mask new_tree key_mask _122
      LSHIFT	//  tree request_cell npos new_valid_untils next_full_mask new_tree _123
      s1 s2 XCHG	//  tree request_cell npos new_valid_untils new_tree next_full_mask _123
      OR	//  tree request_cell npos new_valid_untils new_tree next_full_mask
      SWAP	//  tree request_cell npos new_valid_untils next_full_mask new_tree
      20 STU	//  tree request_cell npos new_valid_untils new_tree
      SWAP	//  tree request_cell npos new_tree new_valid_untils
      STBR	//  tree request_cell npos new_tree
      s3 s1 s3 XCHG3	//  new_tree tree npos request_cell
      replace_request INLINECALLDICT	//  root
      c4 POP
    }>ELSE<{	//  tree request_cell valid_until request key_mask pos cnt full_mask valid_untils new_tree
      s7 POP
      s7 POP	//  tree valid_untils new_tree request key_mask pos cnt full_mask
      s2 PUSH	//  tree valid_untils new_tree request key_mask pos cnt full_mask pos
      1 LSHIFT#	//  tree valid_untils new_tree request key_mask pos cnt full_mask _134
      s1 s(-1) PUXC	//  tree valid_untils new_tree request key_mask pos cnt full_mask full_mask _134
      RSHIFT	//  tree valid_untils new_tree request key_mask pos cnt full_mask _135
      3 PUSHINT	//  tree valid_untils new_tree request key_mask pos cnt full_mask _135 _136=3
      AND	//  tree valid_untils new_tree request key_mask pos cnt full_mask cur_mask
      s0 s4 PUXC	//  tree valid_untils new_tree request cur_mask pos cnt full_mask cur_mask key_mask
      OR	//  tree valid_untils new_tree request cur_mask pos cnt full_mask next_mask
      s4 s4 XCPU	//  tree valid_untils new_tree request next_mask pos cnt full_mask cur_mask next_mask
      EQUAL	//  tree valid_untils new_tree request next_mask pos cnt full_mask _141
      105 THROWIF
      s3 PUSH	//  tree valid_untils new_tree request next_mask pos cnt full_mask next_mask
      3 EQINT	//  tree valid_untils new_tree request next_mask pos cnt full_mask _144
      IF:<{	//  tree valid_untils new_tree request next_mask pos cnt full_mask
        s0 s4 XCHG	//  tree valid_untils new_tree full_mask next_mask pos cnt request
        8 LDU	//  tree valid_untils new_tree full_mask next_mask pos cnt mode request
        LDREF	//  tree valid_untils new_tree full_mask next_mask pos cnt mode _198 _197
        DROP	//  tree valid_untils new_tree full_mask next_mask pos cnt mode msg_to_send
        SWAP	//  tree valid_untils new_tree full_mask next_mask pos cnt msg_to_send mode
        SENDRAWMSG
      }>ELSE<{
        s4 POP	//  tree valid_untils new_tree full_mask next_mask pos cnt
      }>
      SWAP	//  tree valid_untils new_tree full_mask next_mask cnt pos
      1 LSHIFT#	//  tree valid_untils new_tree full_mask next_mask cnt _155
      s1 s2 XCHG	//  tree valid_untils new_tree full_mask cnt next_mask _155
      LSHIFT	//  tree valid_untils new_tree full_mask cnt _156
      s1 s2 XCHG	//  tree valid_untils new_tree cnt full_mask _156
      OR	//  tree valid_untils new_tree cnt next_full_mask
      s0 s2 XCHG	//  tree valid_untils next_full_mask cnt new_tree
      5 STU	//  tree valid_untils next_full_mask new_tree
      20 STU	//  tree valid_untils new_tree
      SWAP	//  tree new_tree valid_untils
      STSLICER	//  tree new_tree
      OVER	//  tree new_tree tree
      SREFS	//  tree new_tree _165
      REPEAT:<{	//  tree new_tree
        SWAP	//  new_tree tree
        LDREF	//  new_tree _166 tree
        s0 s2 XCHG	//  tree _166 new_tree
        STREF	//  tree new_tree
      }>
      NIP	//  new_tree
      ENDC	//  _169
      c4 POP
    }>
    ACCEPT
  }>
  recv_internal PROC:<{
    // 
  }>
  gen_msg_to_send PROC:<{
    //  value
    NEWC	//  value _1
    32 STU	//  _3
    ENDC	//  _4
  }>
  gen_query PROC:<{
    //  priv_key valid_until mode msg_to_send
    s0 s2 XCHG
    NEWC	//  priv_key msg_to_send mode valid_until _5
    32 STU	//  priv_key msg_to_send mode _7
    8 STU	//  priv_key msg_to_send _9
    STREF	//  priv_key _10
    ENDC	//  priv_key request
    DUP	//  priv_key request request
    HASHCU	//  priv_key request hash
    s2 PUSH	//  priv_key request hash priv_key
    SIGN	//  priv_key request signature
    s0 s2 XCHG	//  signature request priv_key
    PRIVTOPUB	//  signature request pub_key
    NEWC	//  signature request pub_key _18
    256 STU	//  signature request _20
    ROT	//  request _20 signature
    STSLICER	//  request _21
    STREF	//  _22
    ENDC	//  _23
    CTOS	//  _24
  }>
  assert_some_actions PROC:<{
    // 
    c5 PUSH CTOS	//  actions
    SEMPTY	//  _3
    200 THROWIF
  }>
  set_keys PROC:<{
    //  priv_key1 priv_key2
    SWAP	//  priv_key2 priv_key1
    PRIVTOPUB	//  priv_key2 pub_key1
    SWAP	//  pub_key1 priv_key2
    PRIVTOPUB	//  pub_key1 pub_key2
    CONT:<{
      pack_data CALLDICT
    }>	//  pub_key1 pub_key2 _8
    -ROT	//  _8 pub_key1 pub_key2
    PAIR	//  _8 _9
    invoke_method CALLDICT	//  _14 _15
    NIP	//  stack
    UNSINGLE	//  data
    c4 POP
  }>
  priv_key1 PROC:<{
    // 
    12345 PUSHINT	//  _0=12345
  }>
  priv_key2 PROC:<{
    // 
    100500 PUSHINT	//  _0=100500
  }>
  set_default_test_parameters PROC:<{
    // 
    priv_key1 INLINECALLDICT	//  _0
    priv_key2 INLINECALLDICT	//  _0 _1
    set_keys CALLDICT
    0 PUSHINT	//  _3=0
    c7 PUSH DUP FIRST
    ROT
    3 SETINDEX
    0 SETINDEX
    c7 POP
  }>
  __test_simple PROC:<{
    // 
    set_default_test_parameters CALLDICT
    10 PUSHINT	//  valid_until=10
    64 PUSHINT	//  valid_until=10 mode=64
    787788 PUSHINT	//  valid_until=10 mode=64 _6=787788
    gen_msg_to_send CALLDICT	//  valid_until=10 mode=64 msg_to_send
    priv_key1 INLINECALLDICT	//  valid_until=10 mode=64 msg_to_send _9
    s3 s2 s1 PUSH3	//  valid_until=10 mode=64 msg_to_send _9 valid_until=10 mode=64 msg_to_send
    gen_query CALLDICT	//  valid_until=10 mode=64 msg_to_send query1
    priv_key2 INLINECALLDICT	//  valid_until=10 mode=64 msg_to_send query1 _12
    3 2 BLKSWAP	//  query1 _12 valid_until=10 mode=64 msg_to_send
    gen_query CALLDICT	//  query1 query2
    CONT:<{
      recv_external CALLDICT
    }>	//  query1 query2 _16
    s0 s2 XCHG	//  _16 query2 query1
    SINGLE	//  _16 query2 _17
    s1 s2 XCHG	//  query2 _16 _17
    invoke_method CALLDICT	//  query2 _35 _36
    DROP	//  query2 gas_used1
    assert_no_actions INLINECALLDICT
    CONT:<{
      recv_external CALLDICT
    }>	//  query2 gas_used1 _22
    s2 PUSH	//  query2 gas_used1 _22 query2
    SINGLE	//  query2 gas_used1 _22 _23
    invoke_method CALLDICT	//  query2 gas_used1 _37 _38
    DROP	//  query2 gas_used1 gas_used2
    parse_c5 INLINECALLDICT	//  query2 gas_used1 gas_used2 c5
    s0 DUMP	//  query2 gas_used1 gas_used2 _27
    DROP	//  query2 gas_used1 gas_used2
    assert_some_actions INLINECALLDICT
    CONT:<{
      recv_external CALLDICT
    }>	//  query2 gas_used1 gas_used2 _30
    s0 s3 XCHG	//  _30 gas_used1 gas_used2 query2
    SINGLE	//  _30 gas_used1 gas_used2 _31
    s1 s3 XCHG	//  gas_used2 gas_used1 _30 _31
    invoke_method_expect_fail CALLDICT	//  gas_used2 gas_used1 gas_used3
    assert_no_actions INLINECALLDICT
    s1 s2 XCHG	//  gas_used1 gas_used2 gas_used3
    TRIPLE	//  _34
  }>
  __test_wrong_signature PROC:<{
    // 
    set_default_test_parameters CALLDICT
    64 PUSHINT	//  mode=64
    10 PUSHINT	//  mode=64 valid_until=10
    123 PUSHINT	//  mode=64 valid_until=10 _6=123
    gen_msg_to_send CALLDICT	//  mode=64 valid_until=10 msg_to_send
    SWAP
    NEWC	//  mode=64 msg_to_send valid_until=10 _9
    32 STU	//  mode=64 msg_to_send _11
    s1 s2 XCHG	//  msg_to_send mode=64 _11
    8 STU	//  msg_to_send _13
    STREF	//  _14
    ENDC	//  request
    DUP	//  request request
    HASHCU	//  request hash
    priv_key1 INLINECALLDICT	//  request hash _19
    SIGN	//  request signature
    priv_key2 INLINECALLDICT	//  request signature _22
    PRIVTOPUB	//  request signature pub_key
    NEWC	//  request signature pub_key _25
    256 STU	//  request signature _27
    SWAP	//  request _27 signature
    STSLICER	//  request _28
    STREF	//  _29
    ENDC	//  _30
    CTOS	//  query
    priv_key1 INLINECALLDICT	//  query _32
    priv_key2 INLINECALLDICT	//  query _32 _33
    set_keys CALLDICT
    CONT:<{
      recv_external CALLDICT
    }>	//  query _35
    SWAP	//  _35 query
    SINGLE	//  _35 _36
    invoke_method_expect_fail CALLDICT	//  _37
    DROP	// 
  }>
}END>c
