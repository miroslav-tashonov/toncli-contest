"Asm.fif" include
// automatically generated from `/root/.config/toncli/func-libs/error_helpers.func` `/root/.config/toncli/func-libs/math_helpers.func` `/root/.config/toncli/func-libs/stdlib.func` `/root/.config/toncli/test-libs/address_helpers.func` `/root/.config/toncli/test-libs/c5_parse_helpers.func` `/root/.config/toncli/test-libs/message_helpers.func` `/root/.config/toncli/test-libs/tests-helpers.func` `/root/.config/toncli/test-libs/storage-test-helpers.func` `/home/miki/Desktop/func-contest-1-tests-playground/task-1/func/code.fc` `/home/miki/Desktop/func-contest-1-tests-playground/task-1/tests/test.fc` 
PROGRAM{
  DECLPROC power
  DECLPROC sqrt
  DECLPROC avg
  DECLPROC exp
  DECLPROC log2
  114362 DECLMETHOD generate_empty_address
  103563 DECLMETHOD generate_internal_address
  71142 DECLMETHOD generate_internal_address_with_custom_data
  105789 DECLMETHOD generate_external_address
  77760 DECLMETHOD generate_external_address_with_custom_data
  119020 DECLMETHOD generate_var_address
  101577 DECLMETHOD generate_var_address_with_custom_data
  DECLPROC parse_send_raw_message
  DECLPROC parse_lib_code
  DECLPROC parse_raw_reserve
  DECLPROC parse_set_code
  DECLPROC parse_c5
  130636 DECLMETHOD generate_external_message
  129018 DECLMETHOD generate_internal_message
  94767 DECLMETHOD parse_internal_message
  97177 DECLMETHOD parse_external_message
  85860 DECLMETHOD get_c7
  78457 DECLMETHOD invoke_method
  93676 DECLMETHOD invoke_method_expect_fail
  127733 DECLMETHOD assert_no_actions
  69682 DECLMETHOD init_environment
  104832 DECLMETHOD storage_key
  68533 DECLMETHOD load_storage_with_tag
  113134 DECLMETHOD save_storage_with_tag
  DECLPROC recv_internal
  128253 DECLMETHOD get_total
  DECLPROC set_default_initial_data
  DECLPROC __test_example
  DECLPROC __test_no_initial_data_should_fail
  DECLPROC __test_set_data
  DECLPROC __test_data_from_prev_test
  DECLPROC __test_throw_doesnt_corrupt_stack
  DECLPROC build_test_cell
  DECLPROC __test_not_integer_return_types
  114440 DECLMETHOD empty_method
  94828 DECLMETHOD __test_empty_method_gas_consumption
  DECLPROC __test_can_return_complex_type_from_test
  DECLPROC sum
  DECLPROC __test_it_should_fail
  DECLPROC __test_can_return_more_than_one_stack_entry
  DECLPROC __test_check_stack_depth_after_prev_test
  DECLPROC __test_empty_return_value_is_also_fine
  power PROC:<{
    //  x exponent
    OVER	//  x exponent x
    0 EQINT	//  x exponent _3
    IFJMP:<{	//  x exponent
      2DROP	// 
      0 PUSHINT	//  _4=0
    }>	//  x exponent
    DUP	//  x exponent exponent
    0 EQINT	//  x exponent _6
    IFJMP:<{	//  x exponent
      2DROP	// 
      1 PUSHINT	//  _7=1
    }>	//  x exponent
    OVER	//  x counter result
    WHILE:<{
      OVER	//  x counter result counter
      1 GTINT	//  x counter result _11
    }>DO<{	//  x counter result
      s2 PUSH	//  x counter result x
      MUL	//  x counter result
      SWAP	//  x result counter
      DEC	//  x result counter
      SWAP	//  x counter result
    }>	//  x counter result
    2 1 BLKDROP2	//  result
  }>
  sqrt PROC:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IFJMP:<{	//  x
      DROP	// 
      0 PUSHINT	//  _3=0
    }>	//  x
    DUP	//  x x
    4 LESSINT	//  x _5
    IFJMP:<{	//  x
      DROP	// 
      1 PUSHINT	//  _6=1
    }>	//  x
    DUP	//  x x
    INC	//  x _9
    1 RSHIFT#	//  x z
    OVER	//  x z y
    WHILE:<{
      2DUP	//  x z y z y
      LESS	//  x z y _13
    }>DO<{	//  x z y
      DROP	//  x z
      s0 s1 s0 PUSH3	//  x z y x z
      DIV	//  x z y _14
      ROT	//  x y _14 z
      ADD	//  x y _15
      1 RSHIFT#	//  x y z
      SWAP	//  x z y
    }>	//  x z y
    2 1 BLKDROP2	//  y
  }>
  avg PROC:<{
    //  x y
    ADD	//  _2
    1 RSHIFT#	//  _4
  }>
  exp PROC:<{
    //  x
    DUP	//  x x
    -1 GTINT	//  x _2
    IF:<{	//  x
      POW2	//  _3
    }>ELSE<{	//  x
      1 PUSHINT	//  x _6=1
      SWAP	//  _6=1 x
      NEGATE	//  _6=1 _8
      RSHIFT	//  _3
    }>
  }>
  log2 PROC:<{
    //  x
    0 PUSHINT	//  x n=0
    7 PUSHPOW2	//  x n=0 _3=128
    exp INLINECALLDICT	//  x n=0 _4
    s2 s(-1) PUXC	//  x n=0 x _4
    GEQ	//  x n=0 _5
    IF:<{	//  x n=0
      DROP	//  x
      128 RSHIFT#	//  x
      7 PUSHPOW2	//  x n
    }>	//  x n
    64 PUSHINT	//  x n _10=64
    exp INLINECALLDICT	//  x n _11
    s2 s(-1) PUXC	//  x n x _11
    GEQ	//  x n _12
    IF:<{	//  x n
      SWAP	//  n x
      64 RSHIFT#	//  n x
      SWAP	//  x n
      64 ADDCONST	//  x n
    }>	//  x n
    32 PUSHINT	//  x n _17=32
    exp INLINECALLDICT	//  x n _18
    s2 s(-1) PUXC	//  x n x _18
    GEQ	//  x n _19
    IF:<{	//  x n
      SWAP	//  n x
      32 RSHIFT#	//  n x
      SWAP	//  x n
      32 ADDCONST	//  x n
    }>	//  x n
    16 PUSHINT	//  x n _24=16
    exp INLINECALLDICT	//  x n _25
    s2 s(-1) PUXC	//  x n x _25
    GEQ	//  x n _26
    IF:<{	//  x n
      SWAP	//  n x
      16 RSHIFT#	//  n x
      SWAP	//  x n
      16 ADDCONST	//  x n
    }>	//  x n
    8 PUSHINT	//  x n _31=8
    exp INLINECALLDICT	//  x n _32
    s2 s(-1) PUXC	//  x n x _32
    GEQ	//  x n _33
    IF:<{	//  x n
      SWAP	//  n x
      8 RSHIFT#	//  n x
      SWAP	//  x n
      8 ADDCONST	//  x n
    }>	//  x n
    4 PUSHINT	//  x n _38=4
    exp INLINECALLDICT	//  x n _39
    s2 s(-1) PUXC	//  x n x _39
    GEQ	//  x n _40
    IF:<{	//  x n
      SWAP	//  n x
      4 RSHIFT#	//  n x
      SWAP	//  x n
      4 ADDCONST	//  x n
    }>	//  x n
    2 PUSHINT	//  x n _45=2
    exp INLINECALLDICT	//  x n _46
    s2 s(-1) PUXC	//  x n x _46
    GEQ	//  x n _47
    IF:<{	//  x n
      SWAP	//  n x
      2 RSHIFT#	//  n x
      SWAP	//  x n
      2 ADDCONST	//  x n
    }>	//  x n
    1 PUSHINT	//  x n _52=1
    exp INLINECALLDICT	//  x n _53
    s1 s2 XCHG	//  n x _53
    GEQ	//  n _54
    IF:<{	//  n
      INC	//  n
    }>	//  n
  }>
  generate_empty_address PROC:<{
    // 
    0 PUSHINT	//  _0=0
    NEWC	//  _0=0 _1
    2 STU	//  _3
    ENDC	//  _4
    CTOS	//  _5
  }>
  generate_internal_address PROC:<{
    // 
    RANDU256	//  address
    -1 PUSHINT	//  address _3=-1
    0 PUSHINT	//  address _3=-1 _4=0
    2 PUSHINT	//  address _3=-1 _4=0 _5=2
    NEWC	//  address _3=-1 _4=0 _5=2 _6
    2 STU	//  address _3=-1 _4=0 _8
    1 STU	//  address _3=-1 _10
    8 STI	//  address _12
    256 STU	//  _14
    ENDC	//  _15
    CTOS	//  address_cell
  }>
  generate_internal_address_with_custom_data PROC:<{
    //  anycast workchain_id address
    2 PUSHINT	//  anycast workchain_id address _4=2
    NEWC	//  anycast workchain_id address _4=2 _5
    2 STU	//  anycast workchain_id address _7
    s1 s3 XCHG	//  address workchain_id anycast _7
    1 STU	//  address workchain_id _9
    8 STI	//  address _11
    256 STU	//  _13
    ENDC	//  _14
    CTOS	//  address_cell
  }>
  generate_external_address PROC:<{
    //  address_length
    RANDU256	//  address_length address
    1 PUSHINT	//  address_length address _4=1
    NEWC	//  address_length address _4=1 _5
    2 STU	//  address_length address _7
    s2 s(-1) PUXC	//  address_length address address_length _7
    8 STU	//  address_length address _9
    ROT	//  address _9 address_length
    STUX	//  _10
    ENDC	//  _11
    CTOS	//  address_cell
  }>
  generate_external_address_with_custom_data PROC:<{
    //  address_length address
    1 PUSHINT	//  address_length address _3=1
    NEWC	//  address_length address _3=1 _4
    2 STU	//  address_length address _6
    s2 s(-1) PUXC	//  address_length address address_length _6
    8 STU	//  address_length address _8
    ROT	//  address _8 address_length
    STUX	//  _9
    ENDC	//  _10
    CTOS	//  address_cell
  }>
  generate_var_address PROC:<{
    //  address_length
    DUP
    8 PUSHPOW2	//  address_length address_length _1=256
    GREATER	//  address_length _2
    IFJMP:<{	//  address_length
      RANDU256	//  address_length address
      RANDU256	//  address_length address address_secondpart
      -1 PUSHINT	//  address_length address address_secondpart _8=-1
      0 PUSHINT	//  address_length address address_secondpart _8=-1 _9=0
      3 PUSHINT	//  address_length address address_secondpart _8=-1 _9=0 _10=3
      NEWC	//  address_length address address_secondpart _8=-1 _9=0 _10=3 _11
      2 STU	//  address_length address address_secondpart _8=-1 _9=0 _13
      1 STU	//  address_length address address_secondpart _8=-1 _15
      s1 s4 XCHG	//  _8=-1 address address_secondpart address_length _15
      9 STU	//  _8=-1 address address_secondpart _17
      s1 s3 XCHG	//  address_secondpart address _8=-1 _17
      8 STI	//  address_secondpart address _19
      256 STU	//  address_secondpart _21
      256 STU	//  _23
      ENDC	//  _24
      CTOS	//  address_cell
    }>	//  address_length
    2 PUSHINT	//  address_length _27=2
    OVER	//  address_length _27=2 address_length
    power INLINECALLDICT	//  address_length _28
    RAND	//  address_length address
    -1 PUSHINT	//  address_length address _31=-1
    0 PUSHINT	//  address_length address _31=-1 _32=0
    3 PUSHINT	//  address_length address _31=-1 _32=0 _33=3
    NEWC	//  address_length address _31=-1 _32=0 _33=3 _34
    2 STU	//  address_length address _31=-1 _32=0 _36
    1 STU	//  address_length address _31=-1 _38
    s3 s(-1) PUXC	//  address_length address _31=-1 address_length _38
    9 STU	//  address_length address _31=-1 _40
    8 STI	//  address_length address _42
    ROT	//  address _42 address_length
    STUX	//  _43
    ENDC	//  _44
    CTOS	//  address_cell
  }>
  generate_var_address_with_custom_data PROC:<{
    //  anycast workchain_id address_length address_slice
    OVER
    8 PUSHPOW2	//  anycast workchain_id address_length address_slice address_length _4=256
    GREATER	//  anycast workchain_id address_length address_slice _5
    IFJMP:<{	//  anycast workchain_id address_length address_slice
      256 LDU	//  anycast workchain_id address_length addr address_slice
      256 LDU	//  anycast workchain_id address_length addr _52 _51
      DROP	//  anycast workchain_id address_length addr addr_second_part
      3 PUSHINT	//  anycast workchain_id address_length addr addr_second_part _15=3
      NEWC	//  anycast workchain_id address_length addr addr_second_part _15=3 _16
      2 STU	//  anycast workchain_id address_length addr addr_second_part _18
      s1 s5 XCHG	//  addr_second_part workchain_id address_length addr anycast _18
      1 STU	//  addr_second_part workchain_id address_length addr _20
      s1 s2 XCHG	//  addr_second_part workchain_id addr address_length _20
      9 STU	//  addr_second_part workchain_id addr _22
      s1 s2 XCHG	//  addr_second_part addr workchain_id _22
      8 STI	//  addr_second_part addr _24
      256 STU	//  addr_second_part _26
      256 STU	//  _28
      ENDC	//  _29
      CTOS	//  address_cell
    }>	//  anycast workchain_id address_length address_slice
    256 LDU	//  anycast workchain_id address_length _54 _53
    DROP	//  anycast workchain_id address_length addr
    3 PUSHINT	//  anycast workchain_id address_length addr _36=3
    NEWC	//  anycast workchain_id address_length addr _36=3 _37
    2 STU	//  anycast workchain_id address_length addr _39
    s1 s4 XCHG	//  addr workchain_id address_length anycast _39
    1 STU	//  addr workchain_id address_length _41
    s1 s(-1) PUXC	//  addr workchain_id address_length address_length _41
    9 STU	//  addr workchain_id address_length _43
    s1 s2 XCHG	//  addr address_length workchain_id _43
    8 STI	//  addr address_length _45
    SWAP	//  addr _45 address_length
    STUX	//  _46
    ENDC	//  _47
    CTOS	//  address_cell
  }>
  parse_send_raw_message PROC:<{
    //  action_message
    8 LDU	//  mode action_message
    LDREF	//  mode _11 _10
    DROP	//  mode message_relaxed
  }>
  parse_lib_code PROC:<{
    //  action_message
    7 LDU	//  mode action_message
    DUP	//  mode action_message action_message
    SREFS	//  mode action_message _5
    0 GTINT	//  mode action_message _7
    IFJMP:<{	//  mode action_message
      LDREF	//  mode _21 _20
      DROP	//  mode library
    }>	//  mode action_message
    256 LDSLICE	//  mode _23 _22
    DROP	//  mode loaded_bits
    NEWC	//  mode loaded_bits _15
    SWAP	//  mode _15 loaded_bits
    STSLICER	//  mode _16
    ENDC	//  mode _17
  }>
  parse_raw_reserve PROC:<{
    //  action_message
    8 LDU	//  mode action_message
    LDDICT	//  mode _10 _9
    DROP	//  mode _5
  }>
  parse_set_code PROC:<{
    //  action_message
    LDREF	//  _4 _3
    DROP	//  _1
  }>
  parse_c5 PROC:<{
    // 
    NIL	//  tuple_to_return
    c5 PUSH	//  tuple_to_return c5
    CTOS	//  tuple_to_return parsed_c5
    DUP	//  tuple_to_return parsed_c5 parsed_c5
    SREFS	//  tuple_to_return parsed_c5 counter
    DUP	//  tuple_to_return parsed_c5 counter counter
    s0 DUMP	//  tuple_to_return parsed_c5 counter _8
    DROP	//  tuple_to_return parsed_c5 counter
    DUP	//  tuple_to_return parsed_c5 counter counter
    0 GTINT	//  tuple_to_return parsed_c5 counter _10
    IF:<{	//  tuple_to_return parsed_c5 counter
      UNTIL:<{
        SWAP	//  tuple_to_return counter parsed_c5
        LDREF	//  tuple_to_return counter parsed_cell parsed_c5
        OVER	//  tuple_to_return counter parsed_cell parsed_c5 parsed_cell
        CDEPTH	//  tuple_to_return counter parsed_cell parsed_c5 _14
        0 EQINT	//  tuple_to_return counter parsed_cell parsed_c5 _16
        IFNOT:<{	//  tuple_to_return counter parsed_cell parsed_c5
          OVER	//  tuple_to_return counter parsed_cell parsed_c5 parsed_cell
          s0 DUMP	//  tuple_to_return counter parsed_cell parsed_c5 _17
          DROP	//  tuple_to_return counter parsed_cell parsed_c5
          SWAP	//  tuple_to_return counter parsed_c5 parsed_cell
          CTOS	//  tuple_to_return counter parsed_c5 parsed
          DUP	//  tuple_to_return counter parsed_c5 parsed parsed
          s0 DUMP	//  tuple_to_return counter parsed_c5 parsed _20
          DROP	//  tuple_to_return counter parsed_c5 parsed
          32 LDU	//  tuple_to_return counter parsed_c5 action_message parsed
          OVER	//  tuple_to_return counter parsed_c5 action_message parsed action_message
          s0 DUMP	//  tuple_to_return counter parsed_c5 action_message parsed _25
          DROP	//  tuple_to_return counter parsed_c5 action_message parsed
          OVER
          247711853 PUSHINT	//  tuple_to_return counter parsed_c5 action_message parsed action_message _26=247711853
          EQUAL	//  tuple_to_return counter parsed_c5 action_message parsed _27
          IF:<{	//  tuple_to_return counter parsed_c5 action_message parsed
            NIP	//  tuple_to_return counter parsed_c5 parsed
            parse_send_raw_message CALLDICT	//  tuple_to_return counter parsed_c5 mode body
            0 PUSHINT	//  tuple_to_return counter parsed_c5 mode body _33=0
            -ROT	//  tuple_to_return counter parsed_c5 _33=0 mode body
            TRIPLE	//  tuple_to_return counter parsed_c5 _32
            s1 s3 XCHG	//  parsed_c5 counter tuple_to_return _32
            TPUSH	//  parsed_c5 counter tuple_to_return
          }>ELSE<{	//  tuple_to_return counter parsed_c5 action_message parsed
            OVER
            921090057 PUSHINT	//  tuple_to_return counter parsed_c5 action_message parsed action_message _35=921090057
            EQUAL	//  tuple_to_return counter parsed_c5 action_message parsed _36
            IF:<{	//  tuple_to_return counter parsed_c5 action_message parsed
              NIP	//  tuple_to_return counter parsed_c5 parsed
              parse_raw_reserve CALLDICT	//  tuple_to_return counter parsed_c5 mode currencies
              0 PUSHINT	//  tuple_to_return counter parsed_c5 mode currencies _42=0
              -ROT	//  tuple_to_return counter parsed_c5 _42=0 mode currencies
              TRIPLE	//  tuple_to_return counter parsed_c5 _41
              s1 s3 XCHG	//  parsed_c5 counter tuple_to_return _41
              TPUSH	//  parsed_c5 counter tuple_to_return
            }>ELSE<{	//  tuple_to_return counter parsed_c5 action_message parsed
              OVER
              2907562126 PUSHINT	//  tuple_to_return counter parsed_c5 action_message parsed action_message _44=2907562126
              EQUAL	//  tuple_to_return counter parsed_c5 action_message parsed _45
              IF:<{	//  tuple_to_return counter parsed_c5 action_message parsed
                NIP	//  tuple_to_return counter parsed_c5 parsed
                parse_set_code CALLDICT	//  tuple_to_return counter parsed_c5 new_setcode
                0 PUSHINT	//  tuple_to_return counter parsed_c5 new_setcode _50=0
                -1 PUSHINT
                ROT	//  tuple_to_return counter parsed_c5 _50=0 _51=-1 new_setcode
                TRIPLE	//  tuple_to_return counter parsed_c5 _49
                s1 s3 XCHG	//  parsed_c5 counter tuple_to_return _49
                TPUSH	//  parsed_c5 counter tuple_to_return
              }>ELSE<{	//  tuple_to_return counter parsed_c5 action_message parsed
                SWAP
                653925844 PUSHINT	//  tuple_to_return counter parsed_c5 parsed action_message _53=653925844
                EQUAL	//  tuple_to_return counter parsed_c5 parsed _54
                IF:<{	//  tuple_to_return counter parsed_c5 parsed
                  parse_lib_code CALLDICT	//  tuple_to_return counter parsed_c5 mode body
                  0 PUSHINT	//  tuple_to_return counter parsed_c5 mode body _60=0
                  -ROT	//  tuple_to_return counter parsed_c5 _60=0 mode body
                  TRIPLE	//  tuple_to_return counter parsed_c5 _59
                  s1 s3 XCHG	//  parsed_c5 counter tuple_to_return _59
                  TPUSH	//  parsed_c5 counter tuple_to_return
                  s0 s2 XCHG	//  tuple_to_return counter parsed_c5
                }>ELSE<{
                  DROP	//  tuple_to_return counter parsed_c5
                }>
                s0 s2 XCHG	//  parsed_c5 counter tuple_to_return
              }>
            }>
          }>
          s0 s2 XCHG	//  tuple_to_return counter parsed_c5
        }>ELSE<{
          NIP	//  tuple_to_return counter parsed_c5
        }>
        SWAP	//  tuple_to_return parsed_c5 counter
        DEC	//  tuple_to_return parsed_c5 counter
        DUP	//  tuple_to_return parsed_c5 counter counter
        0 EQINT	//  tuple_to_return parsed_c5 counter _65
      }>	//  tuple_to_return parsed_c5 counter
      2DROP	//  tuple_to_return
    }>ELSE<{
      2DROP	//  tuple_to_return
    }>
  }>
  generate_external_message PROC:<{
    //  ton_amount payload
    8 PUSHPOW2	//  ton_amount payload _3=256
    generate_external_address CALLDICT	//  ton_amount payload ssrc
    8 PUSHPOW2	//  ton_amount payload ssrc _6=256
    generate_external_address CALLDICT	//  ton_amount payload ssrc sdest
    0 PUSHINT	//  ton_amount payload ssrc sdest _9=0
    1000 PUSHINT	//  ton_amount payload ssrc sdest _9=0 _10=1000
    DUP	//  ton_amount payload ssrc sdest _9=0 _10=1000 _11=1000
    NEWC	//  ton_amount payload ssrc sdest _9=0 _10=1000 _11=1000 _12
    s0 s5 XCHG2	//  ton_amount payload _11=1000 sdest _9=0 _10=1000 _12 ssrc
    STSLICER	//  ton_amount payload _11=1000 sdest _9=0 _10=1000 _13
    s0 s3 XCHG2	//  ton_amount payload _11=1000 _10=1000 _9=0 _13 sdest
    STSLICER	//  ton_amount payload _11=1000 _10=1000 _9=0 _14
    s0 s5 XCHG2	//  _9=0 payload _11=1000 _10=1000 _14 ton_amount
    STGRAMS	//  _9=0 payload _11=1000 _10=1000 _15
    s1 s2 XCHG	//  _9=0 payload _10=1000 _11=1000 _15
    64 STU	//  _9=0 payload _10=1000 _17
    32 STU	//  _9=0 payload _19
    s1 s2 XCHG	//  payload _9=0 _19
    1 STU	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _22
    s2 PUSH	//  payload msg _22 payload
    BBITS	//  payload msg _22 _23
    ADD	//  payload msg _24
    10 PUSHPOW2DEC	//  payload msg _24 _25=1023
    GREATER	//  payload msg _26
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _27
      1 PUSHINT
      ROT	//  _27 _28=1 msg
      1 STU	//  _27 _30
      STREF	//  msg
    }>ELSE<{	//  payload msg
      1 PUSHINT	//  payload msg _32=1
      SWAP	//  payload _32=1 msg
      1 STU	//  payload _34
      SWAP	//  _34 payload
      STBR	//  msg
    }>
    ENDC	//  _36
  }>
  generate_internal_message PROC:<{
    //  bounce ton_amount payload
    generate_internal_address CALLDICT	//  bounce ton_amount payload ssrc
    generate_internal_address CALLDICT	//  bounce ton_amount payload ssrc sdest
    0 PUSHINT	//  bounce ton_amount payload ssrc sdest _8=0
    1000 PUSHINT	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000
    DUP	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000
    PUSHNULL	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11
    s3 s3 s3 PUSH3	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _12=0 _13=0 _14=0
    NEWC	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _12=0 _13=0 _14=0 _15
    1 STU	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _12=0 _13=0 _17
    1 STU	//  bounce ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _12=0 _19
    s1 s10 XCHG	//  _12=0 ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 bounce _19
    1 STU	//  _12=0 ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _11 _21
    s1 s9 XCHG	//  _11 ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _12=0 _21
    1 STU	//  _11 ton_amount payload ssrc sdest _8=0 _9=1000 _10=1000 _23
    s0 s5 XCHG2	//  _11 ton_amount payload _10=1000 sdest _8=0 _9=1000 _23 ssrc
    STSLICER	//  _11 ton_amount payload _10=1000 sdest _8=0 _9=1000 _24
    s0 s3 XCHG2	//  _11 ton_amount payload _10=1000 _9=1000 _8=0 _24 sdest
    STSLICER	//  _11 ton_amount payload _10=1000 _9=1000 _8=0 _25
    s0 s5 XCHG2	//  _11 _8=0 payload _10=1000 _9=1000 _25 ton_amount
    STGRAMS	//  _11 _8=0 payload _10=1000 _9=1000 _26
    s1 s5 XCHG	//  _9=1000 _8=0 payload _10=1000 _11 _26
    STDICT	//  _9=1000 _8=0 payload _10=1000 _27
    s3 PUSH	//  _9=1000 _8=0 payload _10=1000 _27 _28=0
    STGRAMS	//  _9=1000 _8=0 payload _10=1000 _29
    s3 PUSH	//  _9=1000 _8=0 payload _10=1000 _29 _30=0
    STGRAMS	//  _9=1000 _8=0 payload _10=1000 _31
    64 STU	//  _9=1000 _8=0 payload _33
    s1 s3 XCHG	//  payload _8=0 _9=1000 _33
    32 STU	//  payload _8=0 _35
    1 STU	//  payload msg
    DUP	//  payload msg msg
    BBITS	//  payload msg _38
    s2 PUSH	//  payload msg _38 payload
    BBITS	//  payload msg _38 _39
    ADD	//  payload msg _40
    10 PUSHPOW2DEC	//  payload msg _40 _41=1023
    GREATER	//  payload msg _42
    IF:<{	//  payload msg
      SWAP	//  msg payload
      ENDC	//  msg _43
      1 PUSHINT
      ROT	//  _43 _44=1 msg
      1 STU	//  _43 _46
      STREF	//  msg
    }>ELSE<{	//  payload msg
      1 PUSHINT	//  payload msg _48=1
      SWAP	//  payload _48=1 msg
      1 STU	//  payload _50
      SWAP	//  _50 payload
      STBR	//  msg
    }>
    ENDC	//  _52
  }>
  parse_internal_message PROC:<{
    //  message
    CTOS	//  cs
    112 PUSHINT	//  cs _3
    SWAP	//  _3 cs
    1 LDU	//  _3 _4 cs
    SWAP	//  _3 cs _4
    0 NEQINT	//  _3 cs _8
    s1 s2 XCHG	//  cs _3 _8
    THROWANYIF
    1 LDU	//  ihr_disabled cs
    1 LDU	//  ihr_disabled bounce cs
    1 LDU	//  ihr_disabled bounce bounced cs
    LDMSGADDR	//  ihr_disabled bounce bounced _72 _71
    NIP	//  ihr_disabled bounce bounced cs
    LDMSGADDR	//  ihr_disabled bounce bounced to_address cs
    LDVARUINT16	//  ihr_disabled bounce bounced to_address money cs
    LDDICT	//  ihr_disabled bounce bounced to_address money _78 _77
    NIP	//  ihr_disabled bounce bounced to_address money cs
    LDGRAMS	//  ihr_disabled bounce bounced to_address money _80 _79
    NIP	//  ihr_disabled bounce bounced to_address money cs
    LDGRAMS	//  ihr_disabled bounce bounced to_address money _82 _81
    NIP	//  ihr_disabled bounce bounced to_address money cs
    96 LDU	//  ihr_disabled bounce bounced to_address money timestamps cs
    1 LDU	//  ihr_disabled bounce bounced to_address money timestamps maybe_init_state cs
    0xFACC PUSHINT	//  ihr_disabled bounce bounced to_address money timestamps maybe_init_state cs _47
    ROT	//  ihr_disabled bounce bounced to_address money timestamps cs _47 maybe_init_state
    THROWANYIF
    NIL	//  ihr_disabled bounce bounced to_address money timestamps cs init_state
    SWAP	//  ihr_disabled bounce bounced to_address money timestamps init_state cs
    1 LDU	//  ihr_disabled bounce bounced to_address money timestamps init_state body_flag cs
    SWAP	//  ihr_disabled bounce bounced to_address money timestamps init_state cs body_flag
    0 EQINT	//  ihr_disabled bounce bounced to_address money timestamps init_state cs _58
    IF:<{	//  ihr_disabled bounce bounced to_address money timestamps init_state body
    }>ELSE<{	//  ihr_disabled bounce bounced to_address money timestamps init_state cs
      LDREF	//  ihr_disabled bounce bounced to_address money timestamps init_state _90 _89
      DROP	//  ihr_disabled bounce bounced to_address money timestamps init_state _59
      CTOS	//  ihr_disabled bounce bounced to_address money timestamps init_state body
    }>
    8 TUPLE	//  _62
  }>
  parse_external_message PROC:<{
    //  message
    CTOS	//  cs
    LDMSGADDR	//  _34 _33
    NIP	//  cs
    LDMSGADDR	//  to_address cs
    96 LDU	//  to_address timestamps cs
    1 LDU	//  to_address timestamps maybe_init_state cs
    0xFACC PUSHINT	//  to_address timestamps maybe_init_state cs _17
    ROT	//  to_address timestamps cs _17 maybe_init_state
    THROWANYIF
    NIL	//  to_address timestamps cs init_state
    SWAP	//  to_address timestamps init_state cs
    1 LDU	//  to_address timestamps init_state body_flag cs
    SWAP	//  to_address timestamps init_state cs body_flag
    0 EQINT	//  to_address timestamps init_state cs _28
    IF:<{	//  to_address timestamps init_state body
    }>ELSE<{	//  to_address timestamps init_state cs
      LDREF	//  to_address timestamps init_state _44 _43
      DROP	//  to_address timestamps init_state _29
      CTOS	//  to_address timestamps init_state body
    }>
    4 TUPLE	//  _32
  }>
  get_c7 PROC:<{
    // 
    124711402 PUSHINT	//  _2=124711402
    0 PUSHINT	//  _2=124711402 _3=0
    DUP	//  _2=124711402 _3=0 _4=0
    NOW	//  _2=124711402 _3=0 _4=0 _5
    1 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1
    DUP	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1
    239 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239
    1000000000 PUSHINT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _10=1000000000
    PUSHNULL	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _10=1000000000 _11
    PAIR	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12
    MYADDR	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12 _13
    CONFIGROOT	//  _2=124711402 _3=0 _4=0 _5 _6=1 _7=1 _8=239 _12 _13 _14
    10 TUPLE	//  _15
    SINGLE	//  _16
  }>
  invoke_method PROC:<{
    //  fun args
    {
    c7 PUSH DUP FIRST
    GASLIMITSTEMP SWAP DROP
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    GASLIMITSTEMP SWAP DROP
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    RESETLOADEDCELLS
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  exit_code gas_used return_values
    s2 PUSH	//  exit_code gas_used return_values exit_code
    0 NEQINT	//  exit_code gas_used return_values _7
    s3 PUSH	//  exit_code gas_used return_values _7 exit_code
    1 NEQINT	//  exit_code gas_used return_values _7 _9
    AND	//  exit_code gas_used return_values _10
    s1 s3 XCHG	//  return_values gas_used exit_code _10
    THROWANYIF
    SWAP	//  gas_used return_values
  }>
  invoke_method_expect_fail PROC:<{
    //  fun args
    {
    c7 PUSH DUP FIRST
    GASLIMITSTEMP SWAP DROP
    11 SETINDEX 0 SETINDEX c7 POP
    } : save-gas-remaining
    {
    GASLIMITSTEMP SWAP DROP
    11 GETPARAM SWAP SUB
    145 PUSHINT SUB
    } : compute-gas-used
    NEWC ENDC c5 POP
    RESETLOADEDCELLS
    255 PUSHINT EXPLODEVAR
    DUP INC ROLLX
    <{
    <{
    save-gas-remaining
    EXECUTE
    compute-gas-used
    DEPTH DEC ROLLREVX
    DEPTH DEC TUPLEVAR
    ZERO ROTREV
    }> PUSHCONT
    <{
    compute-gas-used
    ROT DROP NIL
    }> PUSHCONT
    TRY
    }> PUSHCONT
    ROT INC -1 PUSHINT
    CALLXVARARGS	//  _13 _14 _15
    DROP	//  exit_code gas_used
    OVER	//  exit_code gas_used exit_code
    0 EQINT	//  exit_code gas_used _8
    s0 s2 XCHG	//  _8 gas_used exit_code
    1 EQINT	//  _8 gas_used _10
    s1 s2 XCHG	//  gas_used _8 _10
    OR	//  gas_used _11
    201 THROWIF
  }>
  assert_no_actions PROC:<{
    // 
    c5 PUSH CTOS	//  _1
    SEMPTY	//  _2
    NOT	//  _3
    202 THROWIF
  }>
  init_environment PROC:<{
    // 
    PUSHNULL	//  _0
    NEWC	//  _0 _1
    STDICT	//  _2
    ENDC	//  _3
    c4 POP
  }>
  storage_key PROC:<{
    //  tag
    2824609491042946229920590003095732224 PUSHINTX	//  tag _3
    SWAP	//  _3 tag
    ADD	//  _4
  }>
  load_storage_with_tag PROC:<{
    //  tag
    storage_key CALLDICT	//  _1
    c4 PUSH	//  _1 _2
    CTOS	//  _1 _3
    PLDDICT	//  _1 _4
    8 PUSHPOW2	//  _1 _4 _5=256
    DICTIGETOPTREF	//  _6
  }>
  save_storage_with_tag PROC:<{
    //  tag storage
    c4 PUSH	//  tag storage _3
    CTOS	//  tag storage _4
    PLDDICT	//  tag storage dict
    s0 s2 XCHG	//  dict storage tag
    storage_key CALLDICT	//  dict storage _7
    ROT
    8 PUSHPOW2	//  storage _7 dict _8=256
    DICTISETREF	//  dict
    NEWC	//  dict _10
    STDICT	//  _11
    ENDC	//  _12
    c4 POP
  }>
  recv_internal PROC:<{
    //  in_msg
    32 LDU	//  _20 _19
    DROP	//  n
    c4 PUSH	//  n _6
    CTOS	//  n ds
    64 LDU	//  n _22 _21
    DROP	//  n total
    SWAP	//  total n
    ADD	//  total
    NEWC	//  total _13
    64 STU	//  _15
    ENDC	//  _16
    64 PUSHINT	//  _16 _17=64
    SENDRAWMSG
  }>
  get_total PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  ds
    64 LDU	//  _8 _7
    DROP	//  total
  }>
  set_default_initial_data PROC:<{
    // 
    0 PUSHINT	//  _0=0
    NEWC	//  _0=0 _1
    64 STU	//  _3
    ENDC	//  _4
    c4 POP
  }>
  __test_example PROC:<{
    // 
    set_default_initial_data CALLDICT
    10 PUSHINT	//  _2=10
    NEWC	//  _2=10 _3
    32 STU	//  _5
    ENDC	//  message
    CONT:<{
      recv_internal CALLDICT
    }>	//  message _9
    SWAP	//  _9 message
    CTOS	//  _9 _11
    SINGLE	//  _9 _10
    invoke_method CALLDICT	//  _25 _26
    DROP	//  gas_used1
    CONT:<{
      get_total CALLDICT
    }>	//  gas_used1 _15
    0 TUPLE	//  gas_used1 _15 _16
    invoke_method CALLDICT	//  gas_used1 gas_used2 stack
    UNSINGLE	//  gas_used1 gas_used2 total
    10 NEQINT	//  gas_used1 gas_used2 _22
    101 THROWIF
    ADD	//  _24
  }>
  __test_no_initial_data_should_fail PROC:<{
    // 
    CONT:<{
      get_total CALLDICT
    }>	//  _1
    0 TUPLE	//  _1 _2
    invoke_method_expect_fail CALLDICT	//  gas_used
  }>
  __test_set_data PROC:<{
    // 
    __test_example CALLDICT	//  _0
  }>
  __test_data_from_prev_test PROC:<{
    // 
    10 GETPARAM UNPAIR DROP	//  _0
    c4 POP
    CONT:<{
      get_total CALLDICT
    }>	//  _4
    0 TUPLE	//  _4 _5
    invoke_method CALLDICT	//  gas_used stack
    UNSINGLE	//  gas_used total
    10 NEQINT	//  gas_used _11
    102 THROWIF
  }>
  __test_throw_doesnt_corrupt_stack PROC:<{
    // 
    CONT:<{
      get_total CALLDICT
    }>	//  _3
    0 TUPLE	//  _3 _4
    invoke_method_expect_fail CALLDICT	//  gas_used
  }>
  build_test_cell PROC:<{
    //  x y
    12345 PUSHINT	//  x y _2=12345
    s0 s2 XCHG
    NEWC	//  _2=12345 y x _3
    64 STU	//  _2=12345 y _5
    64 STU	//  _2=12345 _7
    ENDC	//  _2=12345 _8
  }>
  __test_not_integer_return_types PROC:<{
    // 
    CONT:<{
      build_test_cell CALLDICT
    }>	//  _2
    100 PUSHINT	//  _2 _4=100
    500 PUSHINT	//  _2 _4=100 _5=500
    PAIR	//  _2 _3
    invoke_method CALLDICT	//  gas_used stack
    UNPAIR	//  gas_used res c
    SWAP
    12345 PUSHINT	//  gas_used c res _11=12345
    NEQ	//  gas_used c _12
    102 THROWIF
    CTOS	//  gas_used s
    64 LDU	//  gas_used _17 s
    SWAP	//  gas_used s _17
    100 NEQINT	//  gas_used s _21
    103 THROWIF
    64 LDU	//  gas_used _37 _36
    DROP	//  gas_used _24
    500 PUSHINT	//  gas_used _24 _27=500
    NEQ	//  gas_used _28
    104 THROWIF
  }>
  empty_method PROC:<{
    // 
  }>
  __test_empty_method_gas_consumption PROC:<{
    // 
    CONT:<{
      empty_method CALLDICT
    }>	//  _2
    0 TUPLE	//  _2 _3
    invoke_method CALLDICT	//  _13 _14
    DROP	//  gas_used
    DUP
    500 PUSHINT	//  gas_used gas_used _6=500
    LESS	//  gas_used _7
    101 THROWIF
    DUP
    700 PUSHINT	//  gas_used gas_used _10=700
    GREATER	//  gas_used _11
    102 THROWIF
  }>
  __test_can_return_complex_type_from_test PROC:<{
    // 
    set_default_initial_data CALLDICT
    10 PUSHINT	//  _2=10
    NEWC	//  _2=10 _3
    32 STU	//  _5
    ENDC	//  message
    CONT:<{
      recv_internal CALLDICT
    }>	//  message _9
    OVER	//  message _9 message
    CTOS	//  message _9 _11
    SINGLE	//  message _9 _10
    invoke_method CALLDICT	//  message _29 _30
    DROP	//  message gas_used1
    CONT:<{
      recv_internal CALLDICT
    }>	//  message gas_used1 _15
    s2 PUSH	//  message gas_used1 _15 message
    CTOS	//  message gas_used1 _15 _17
    SINGLE	//  message gas_used1 _15 _16
    invoke_method CALLDICT	//  message gas_used1 _31 _32
    DROP	//  message gas_used1 gas_used2
    CONT:<{
      recv_internal CALLDICT
    }>	//  message gas_used1 gas_used2 _21
    s0 s3 XCHG	//  _21 gas_used1 gas_used2 message
    CTOS	//  _21 gas_used1 gas_used2 _23
    SINGLE	//  _21 gas_used1 gas_used2 _22
    s1 s3 XCHG	//  gas_used2 gas_used1 _21 _22
    invoke_method CALLDICT	//  gas_used2 gas_used1 _33 _34
    DROP	//  gas_used2 gas_used1 gas_used3
    parse_c5 CALLDICT	//  gas_used2 gas_used1 gas_used3 c5
    s0 DUMP	//  gas_used2 gas_used1 gas_used3 _27
    DROP	//  gas_used2 gas_used1 gas_used3
    s1 s2 XCHG	//  gas_used1 gas_used2 gas_used3
    TRIPLE	//  _28
  }>
  sum PROC:<{
    //  x y
    ADD	//  _2
  }>
  __test_it_should_fail PROC:<{
    // 
    CONT:<{
      sum CALLDICT
    }>	//  _2
    3 PUSHINT	//  _2 _4=3
    4 PUSHINT	//  _2 _4=3 _5=4
    PAIR	//  _2 _3
    invoke_method CALLDICT	//  gas_used stack
    UNPAIR	//  gas_used a b
    TRIPLE	//  _10
  }>
  __test_can_return_more_than_one_stack_entry PROC:<{
    // 
    1 PUSHINT	//  _0=1
    2 PUSHINT	//  _0=1 _1=2
    3 PUSHINT	//  _0=1 _1=2 _2=3
  }>
  __test_check_stack_depth_after_prev_test PROC:<{
    // 
    DEPTH	//  depth
    0 NEQINT	//  _4
    100 THROWIF
    0 PUSHINT	//  _6=0
  }>
  __test_empty_return_value_is_also_fine PROC:<{
    // 
  }>
}END>c
