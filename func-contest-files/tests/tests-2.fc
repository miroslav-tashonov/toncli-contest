int equal_slices (slice a, slice b) asm "SDEQ";_ 

test_validate_message_1() {
    var expected_code = -1;
    cell message = generate_internal_message(0, 1000, begin_cell().store_ref(begin_cell().store_uint(1,256).end_cell()));
    var (_, stack) = invoke_method(validate_message, [message]);

    var [_, _, _, slice src, slice dest, int amount, _, _, _] = parse_internal_message(message);

    var code = stack.first();
    throw_if(200, code != expected_code );

    tuple return_tuple = stack.second();
    throw_if(200, equal_slices(return_tuple.first(), src) != -1 );
    throw_if(200, equal_slices(return_tuple.second(), dest) != -1 );
    throw_if(200, return_tuple.third() != amount );


    return 10;
}

_ test_validate_message_2() {
    var expected_code = -1;
    cell message = generate_internal_message_relaxed(0, 1000, begin_cell().store_ref(begin_cell().store_uint(1,256).end_cell()));
    var (_, stack) = invoke_method(validate_message, [message]);

    var [_, _, _, slice src, slice dest, int amount, _, _, _] = parse_internal_message(message);

    var code = stack.first();
    throw_if(200, code != expected_code );

    tuple return_tuple = stack.second();
    throw_if(200, equal_slices(return_tuple.first(), src) != -1 );
    throw_if(200, equal_slices(return_tuple.second(), dest) != -1 );
    throw_if(200, return_tuple.third() != amount );


    return 10;
}

_ test_validate_message_3() {
    var expected_code = -1;
    cell message = generate_external_in_message(256, begin_cell().store_ref(begin_cell().store_uint(1,256).end_cell()));
    var (_, stack) = invoke_method(validate_message, [message]);

    var [slice src, slice dest, _, _, _, _] = parse_external_message(message);

    var code = stack.first();
    throw_if(200, code != expected_code );

    tuple return_tuple = stack.second();
    throw_if(200, equal_slices(return_tuple.first(), src) != -1 );
    throw_if(200, equal_slices(return_tuple.second(), dest) != -1 );
    throw_if(200, return_tuple.third() == null() );

    return 10;
}

_ test_validate_message_4() {
    var expected_code = -1;
    cell message = generate_external_out_message(256, begin_cell().store_ref(begin_cell().store_uint(1,256).end_cell()));
    var (_, stack) = invoke_method(validate_message, [message]);

    var [slice src, slice dest, _, _, _, _] = parse_external_message(message);

    var code = stack.first();
    throw_if(200, code != expected_code );

    tuple return_tuple = stack.second();
    throw_if(200, equal_slices(return_tuple.first(), src) != -1 );
    throw_if(200, equal_slices(return_tuple.second(), dest) != -1 );
    throw_if(200, return_tuple.third() == null() );

    return 10;
}

_ test_validate_message_5() {
    var expected_code = -1;
    cell message = generate_external_out_message_relaxed(256, begin_cell().store_ref(begin_cell().store_uint(1,256).end_cell()));
    var (_, stack) = invoke_method(validate_message, [message]);

    var [slice src, slice dest, _, _, _, _] = parse_external_message(message);

    var code = stack.first();
    throw_if(200, code != expected_code );

    tuple return_tuple = stack.second();
    throw_if(200, equal_slices(return_tuple.first(), src) != -1 );
    throw_if(200, equal_slices(return_tuple.second(), dest) != -1 );
    throw_if(200, return_tuple.third() == null() );

    return 10;
}

_ test_validate_message_6() {
    var expected_code = -1;

    cell message = generate_external_out_message_with_empty_address(256, begin_cell().store_ref(begin_cell().store_uint(1,256).end_cell()));
    var (_, stack) = invoke_method(validate_message, [message]);

    var [slice src, slice dest, _, _, _, _] = parse_external_message(message);

    var code = stack.first();
    throw_if(200, code != expected_code );

    tuple return_tuple = stack.second();
    throw_if(200, equal_slices(return_tuple.first(), src) != -1 );
    throw_if(200, return_tuple.second() == null() );
    throw_if(200, return_tuple.third() == null() );

    return 15;
}

_ test_validate_message_7() {
    var expected_code = -1;

    cell message = generate_external_in_message_with_empty_address(256, begin_cell().store_ref(begin_cell().store_uint(1,256).end_cell()));
    var (_, stack) = invoke_method(validate_message, [message]);

    var [slice src, slice dest, _, _, _, _] = parse_external_message(message);

    var code = stack.first();
    throw_if(200, code != expected_code );

    tuple return_tuple = stack.second();
    throw_if(200, return_tuple.first() == null() );
    throw_if(200, equal_slices(return_tuple.second(), dest) != -1  );
    throw_if(200, return_tuple.third() == null() );

    return 15;
}

_ test_validate_message_8() {
    var expected_code = 0;

    ;;set as null value
    cell message = begin_cell().end_cell();
    var (_, stack) = invoke_method(validate_message, [message]);

    throw_if(200, stack.first() != expected_code );
    throw_if(200, stack.second() == null() );

    return 5;
}

_ test_validate_message_9() {
    var expected_code = 0;

    ;;todo
    cell message = begin_cell().end_cell();
    var (_, stack) = invoke_method(validate_message, [message]);

    throw_if(200, stack.first() != expected_code );
    throw_if(200, stack.second() == null() );

    return 5;
}

_ test_validate_message_10() {
    var expected_code = 0;

    ;;todo
    cell message = begin_cell().end_cell();
    var (_, stack) = invoke_method(validate_message, [message]);

    throw_if(200, stack.first() != expected_code );
    throw_if(200, stack.second() == null() );

    return 10;
}


_ __test_validate_message_total_points(){
    var total_result = 0;

    var (code, _, stack) = invoke_method_full(test_validate_message_1, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_validate_message_2, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_validate_message_3, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_validate_message_4, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_validate_message_5, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_validate_message_6, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_validate_message_7, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_validate_message_8, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_validate_message_9, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_validate_message_10, []);
    total_result += (code != 0) ? 0 : stack.first();
    
    return total_result;
}
