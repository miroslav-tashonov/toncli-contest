_ test_merge_hashmaps_1() {
    cell first_dictionary = begin_cell().end_cell();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(merge_hashmaps, [first_dictionary, second_dictionary]);
    [cell first, cell second] = stack;

    return 5;
}

_ test_merge_hashmaps_2() {
    cell first_dictionary = begin_cell().end_cell();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(merge_hashmaps, [first_dictionary, second_dictionary]);
    [cell first, cell second] = stack;

    return 5;
}

_ test_merge_hashmaps_3() {
    cell first_dictionary = begin_cell().end_cell();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(merge_hashmaps, [first_dictionary, second_dictionary]);
    [cell first, cell second] = stack;

    return 5;
}

_ test_merge_hashmaps_4() {
    cell first_dictionary = begin_cell().end_cell();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(merge_hashmaps, [first_dictionary, second_dictionary]);
    [cell first, cell second] = stack;

    return 10;
}

_ test_merge_hashmaps_5() {
    cell first_dictionary = begin_cell().end_cell();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(merge_hashmaps, [first_dictionary, second_dictionary]);
    [cell first, cell second] = stack;

    return 10;
}

_ test_merge_hashmaps_6() {
    cell first_dictionary = begin_cell().end_cell();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(merge_hashmaps, [first_dictionary, second_dictionary]);
    [cell first, cell second] = stack;

    return 10;
}

_ test_merge_hashmaps_7() {
    cell first_dictionary = begin_cell().end_cell();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(merge_hashmaps, [first_dictionary, second_dictionary]);
    [cell first, cell second] = stack;

    return 10;
}

_ test_merge_hashmaps_8() {
    cell first_dictionary = begin_cell().end_cell();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(merge_hashmaps, [first_dictionary, second_dictionary]);
    [cell first, cell second] = stack;

    return 15;
}

_ test_merge_hashmaps_9() {
    cell first_dictionary = begin_cell().end_cell();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(merge_hashmaps, [first_dictionary, second_dictionary]);
    [cell first, cell second] = stack;

    return 15;
}

_ test_merge_hashmaps_10() {
    cell first_dictionary = begin_cell().end_cell();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(merge_hashmaps, [first_dictionary, second_dictionary]);
    [cell first, cell second] = stack;

    return 15;
}


_ __test_merge_hashmaps_total_points(){
    var total_result = 0;

    var (code, _, stack) = invoke_method_full(test_merge_hashmaps_1, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_merge_hashmaps_2, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_merge_hashmaps_3, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_merge_hashmaps_4, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_merge_hashmaps_5, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_merge_hashmaps_6, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_merge_hashmaps_7, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_merge_hashmaps_8, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_merge_hashmaps_9, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_merge_hashmaps_10, []);
    total_result += (code != 0) ? 0 : stack.first();
    
    return total_result;
}
