_ test_encode_address_1() {
    slice address = begin_cell().end_cell().begin_parse();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(encode_address, [address]);
    [slice result] = stack;

    return 5;
}

_ test_encode_address_2() {
    slice address = begin_cell().end_cell().begin_parse();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(encode_address, [address]);
    [slice result] = stack;

    return 5;
}

_ test_encode_address_3() {
    slice address = begin_cell().end_cell().begin_parse();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(encode_address, [address]);
    [slice result] = stack;

    return 5;
}

_ test_encode_address_4() {
    slice address = begin_cell().end_cell().begin_parse();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(encode_address, [address]);
    [slice result] = stack;

    return 10;
}

_ test_encode_address_5() {
    slice address = begin_cell().end_cell().begin_parse();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(encode_address, [address]);
    [slice result] = stack;

    return 10;
}

_ test_encode_address_6() {
    slice address = begin_cell().end_cell().begin_parse();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(encode_address, [address]);
    [slice result] = stack;

    return 10;
}

_ test_encode_address_7() {
    slice address = begin_cell().end_cell().begin_parse();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(encode_address, [address]);
    [slice result] = stack;

    return 10;
}

_ test_encode_address_8() {
    slice address = begin_cell().end_cell().begin_parse();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(encode_address, [address]);
    [slice result] = stack;

    return 15;
}

_ test_encode_address_9() {
    slice address = begin_cell().end_cell().begin_parse();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(encode_address, [address]);
    [slice result] = stack;

    return 15;
}

_ test_encode_address_10() {
    slice address = begin_cell().end_cell().begin_parse();
    cell second_dictionary = begin_cell().end_cell();

    var (_, stack) = invoke_method(encode_address, [address]);
    [slice result] = stack;

    return 15;
}


_ __test_encode_address_total_points(){
    var total_result = 0;

    var (code, _, stack) = invoke_method_full(test_encode_address_1, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_encode_address_2, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_encode_address_3, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_encode_address_4, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_encode_address_5, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_encode_address_6, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_encode_address_7, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_encode_address_8, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_encode_address_9, []);
    total_result += (code != 0) ? 0 : stack.first();
    var (code, _, stack) = invoke_method_full(test_encode_address_10, []);
    total_result += (code != 0) ? 0 : stack.first();
    
    return total_result;
}
